(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[50],{4498:function(e,t,n){"use strict";n.d(t,{E:function(){return s}});var o=n(7462),a=n(7294),r=n(6591),s=a.forwardRef((function(e,t){return a.createElement(r.r,(0,o.Z)({iconAttrs:{fill:"currentColor",xmlns:"http://www.w3.org/2000/svg"},iconVerticalAlign:"middle",iconViewBox:"0 0 496 512"},e,{ref:t}),a.createElement("path",{fill:"currentColor",d:"M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3.3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5.3-6.2 2.3zm44.2-1.7c-2.9.7-4.9 2.6-4.6 4.9.3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3.7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3.3 2.9 2.3 3.9 1.6 1 3.6.7 4.3-.7.7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3.7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3.7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z"}))}));s.displayName="Github"},927:function(e,t,n){"use strict";n.d(t,{H:function(){return s}});var o=n(7462),a=n(7294),r=n(6591),s=a.forwardRef((function(e,t){return a.createElement(r.r,(0,o.Z)({iconAttrs:{fill:"currentColor",xmlns:"http://www.w3.org/2000/svg"},iconVerticalAlign:"middle",iconViewBox:"0 0 512 512"},e,{ref:t}),a.createElement("path",{fill:"currentColor",d:"M71.5 142.3c.6-5.9-1.7-11.8-6.1-15.8L20.3 72.1V64h140.2l108.4 237.7L364.2 64h133.7v8.1l-38.6 37c-3.3 2.5-5 6.7-4.3 10.8v272c-.7 4.1 1 8.3 4.3 10.8l37.7 37v8.1H307.3v-8.1l39.1-37.9c3.8-3.8 3.8-5 3.8-10.8V171.2L241.5 447.1h-14.7L100.4 171.2v184.9c-1.1 7.8 1.5 15.6 7 21.2l50.8 61.6v8.1h-144v-8L65 377.3c5.4-5.6 7.9-13.5 6.5-21.2V142.3z"}))}));s.displayName="MediumM"},8410:function(e,t,n){"use strict";n.d(t,{x:function(){return s}});var o=n(7462),a=n(7294),r=n(6591),s=a.forwardRef((function(e,t){return a.createElement(r.r,(0,o.Z)({iconAttrs:{fill:"currentColor",xmlns:"http://www.w3.org/2000/svg"},iconVerticalAlign:"middle",iconViewBox:"0 0 24 24"},e,{ref:t}),a.createElement("path",{fill:"none",d:"M0 0h24v24H0z"}),a.createElement("path",{d:"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"}))}));s.displayName="Close"},2524:function(e,t,n){"use strict";n.d(t,{W:function(){return s}});var o=n(7462),a=n(7294),r=n(6591),s=a.forwardRef((function(e,t){return a.createElement(r.r,(0,o.Z)({iconAttrs:{fill:"currentColor",xmlns:"http://www.w3.org/2000/svg"},iconVerticalAlign:"middle",iconViewBox:"0 0 24 24"},e,{ref:t}),a.createElement("path",{fill:"none",d:"M0 0h24v24H0V0z"}),a.createElement("path",{d:"M7.41 8.59L12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z"}))}));s.displayName="KeyboardArrowDown"},5595:function(e,t,n){"use strict";n.d(t,{o:function(){return s}});var o=n(7462),a=n(7294),r=n(6591),s=a.forwardRef((function(e,t){return a.createElement(r.r,(0,o.Z)({iconAttrs:{fill:"currentColor",xmlns:"http://www.w3.org/2000/svg"},iconVerticalAlign:"middle",iconViewBox:"0 0 24 24"},e,{ref:t}),a.createElement("path",{fill:"none",d:"M0 0h24v24H0z"}),a.createElement("path",{d:"M15.5 14h-.79l-.28-.27A6.471 6.471 0 0016 9.5 6.5 6.5 0 109.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"}))}));s.displayName="Search"},710:function(e,t,n){"use strict";var o=n(2777),a=n(2262),r=n(748),s=n(5959),i=n(3553),l=n(7247),p=n(9499),d=n(7294),c=n(4505),m=n(8461),u=n(6390),h=n(5893);function y(e){var t=function(){if("undefined"===typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"===typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,o=(0,l.Z)(e);if(t){var a=(0,l.Z)(this).constructor;n=Reflect.construct(o,arguments,a)}else n=o.apply(this,arguments);return(0,i.Z)(this,n)}}var k=function(e){(0,s.Z)(n,e);var t=y(n);function n(){var e;(0,o.Z)(this,n);for(var a=arguments.length,s=new Array(a),i=0;i<a;i++)s[i]=arguments[i];return e=t.call.apply(t,[this].concat(s)),(0,p.Z)((0,r.Z)(e),"state",{isSideFolded:!0,isMobileNavFolded:!0}),(0,p.Z)((0,r.Z)(e),"onSideToggle",(function(){e.setState({isSideFolded:!e.state.isSideFolded,isMobileNavFolded:!0})})),(0,p.Z)((0,r.Z)(e),"onMobileNavToggle",(function(){e.setState({isMobileNavFolded:!e.state.isMobileNavFolded,isSideFolded:!0})})),(0,p.Z)((0,r.Z)(e),"onRouteChange",(function(){e.setState({isSideFolded:!0,isMobileNavFolded:!0})})),e}return(0,a.Z)(n,[{key:"render",value:function(){var e=this.props,t=e.children,n=e.title,o=e.description,a=e.useDocsSidebarMenu,r=void 0===a||a,s=e.pages,i=this.state,l=i.isSideFolded,p=i.isMobileNavFolded;return(0,h.jsxs)(u.W2,{children:[(0,h.jsx)(c.Z,{title:"styled-components".concat(n?": ".concat(n):""),description:o,children:(0,h.jsx)("meta",{name:"robots",content:"noodp"})}),(0,h.jsx)(m.Z,{useDocsSidebarMenu:r,isSideFolded:l,isMobileNavFolded:p,pages:s,onSideToggle:this.onSideToggle,onMobileNavToggle:this.onMobileNavToggle,onRouteChange:this.onRouteChange}),(0,h.jsxs)(u.VY,{moveRight:!l,"data-e2e-id":"content",children:[(0,h.jsx)(u.Dx,{children:n}),t]})]})}}]),n}(d.Component);(0,p.Z)(k,"defaultProps",{title:"",description:""}),t.Z=k},8916:function(e,t,n){"use strict";n.d(t,{Z:function(){return f}});var o=n(186),a=n(7462),r=n(7294),s=n(6591),i=r.forwardRef((function(e,t){return r.createElement(s.r,(0,a.Z)({iconAttrs:{fill:"currentColor",xmlns:"http://www.w3.org/2000/svg"},iconVerticalAlign:"middle",iconViewBox:"0 0 24 24"},e,{ref:t}),r.createElement("path",{fill:"none",d:"M0 0h24v24H0V0z"}),r.createElement("path",{d:"M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z"}))}));i.displayName="KeyboardArrowRight";var l=n(6549),p=n(2250),d=n(5184),c=n(3401),m=n(688),u=n(5893),h=(0,o.ZP)(p.ZP).attrs((function(){return{unstyled:!0}})).withConfig({displayName:"NextPage__Wrapper",componentId:"sc-xdq90t-0"})(["display:flex;flex-direction:row;align-items:stretch;justify-content:flex-end;width:100%;padding:"," ",";text-align:right;font-family:",";",";"],(0,l.Z)(40),(0,l.Z)(20),m.Cc,(0,c.a)((0,o.iv)(["text-align:left;justify-content:center;padding:"," ",";"],(0,l.Z)(30),(0,l.Z)(20)))),y=o.ZP.h3.withConfig({displayName:"NextPage__Text",componentId:"sc-xdq90t-1"})(["font-weight:normal;padding-right:",";margin:0;"],(0,l.Z)(20)),k=o.ZP.h2.withConfig({displayName:"NextPage__PageName",componentId:"sc-xdq90t-2"})(["font-weight:600;padding-right:",";margin:0;"],(0,l.Z)(20)),g=(0,o.ZP)(i).withConfig({displayName:"NextPage__Icon",componentId:"sc-xdq90t-3"})(["color:",";width:",";"],d.BA,(0,l.Z)(30)),f=function(e){var t=e.title,n=e.href;return(0,u.jsxs)(h,{unstyled:!0,href:n,children:[(0,u.jsxs)("div",{children:[(0,u.jsx)(y,{children:"Continue on the next page"}),(0,u.jsx)(k,{children:t})]}),(0,u.jsx)("div",{children:(0,u.jsx)(g,{})})]})}},4627:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return H}});var o=n(6864),a=n(4730),r=(n(7294),n(3905)),s=n(710),i=n(8916),l=["components"],p={};function d(e){var t=e.components,n=(0,a.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",null,"Motivation"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"styled-components is the result of wondering how we could enhance CSS for styling React component systems.")," By focusing on a single use case we managed to optimize the experience for developers as well as the output for end users."),(0,r.kt)("p",null,"Apart from the improved experience for developers, styled-components provides:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Automatic critical CSS"),": styled-components keeps track of which components are rendered on a page and injects their styles and nothing else, fully automatically. Combined with code splitting, this means your users load the least amount of code necessary."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"No class name bugs"),": styled-components generates unique class names for your styles. You never have to worry about duplication, overlap or misspellings."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Easier deletion of CSS"),": it can be hard to know whether a class name is used somewhere in your codebase. styled-components makes it obvious, as every bit of styling is tied to a specific component. If the component is unused (which tooling can detect) and gets deleted, all its styles get deleted with it."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Simple dynamic styling"),": adapting the styling of a component based on its props or a global theme is simple and intuitive without having to manually manage dozens of classes."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Painless maintenance"),": you never have to hunt across different files to find the styling affecting your component, so maintenance is a piece of cake no matter how big your codebase is."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Automatic vendor prefixing"),": write your CSS to the current standard and let styled-components handle the rest.")),(0,r.kt)("p",null,"You get all of these benefits while still writing the CSS you know and love, just bound to individual components."))}d.isMDXComponent=!0;var c=["components"],m={};function u(e){var t=e.components,n=(0,a.Z)(e,c);return(0,r.kt)("wrapper",(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",null,"Getting Started"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"styled-components")," utilises tagged template literals to style your components."),(0,r.kt)("p",null,"It removes the mapping between components and styles. This means that when you're defining your styles, you're actually creating a normal React component, that has your styles attached to it."),(0,r.kt)("p",null,"This example creates two simple components, a wrapper and a title, with some styles attached to it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-react"},"// Create a Title component that'll render an <h1> tag with some styles\nconst Title = styled.h1`\n  font-size: 1.5em;\n  text-align: center;\n  color: palevioletred;\n`;\n\n// Create a Wrapper component that'll render a <section> tag with some styles\nconst Wrapper = styled.section`\n  padding: 4em;\n  background: papayawhip;\n`;\n\n// Use Title and Wrapper like any other React component \u2013 except they're styled!\nrender(\n  <Wrapper>\n    <Title>\n      Hello World!\n    </Title>\n  </Wrapper>\n);\n")),(0,r.kt)("p",null,"This is a live editor, so play around with the code to get a feel for what it's like to work with styled-components!"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"The CSS rules are automatically vendor prefixed, styled-components takes care of that for you!"),(0,r.kt)("p",{parentName:"blockquote"},"Styled components uses ",(0,r.kt)("a",{parentName:"p",href:"https://stylis.js.org/"},"stylis.js")," package under the hood for prefixing the css rules."),(0,r.kt)("p",{parentName:"blockquote"},"For additional information about the supported prefixes in stylis.js visit their ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/thysultan/stylis.js"},"repository"),".")))}u.isMDXComponent=!0;var h=["components"],y={};function k(e){var t=e.components,n=(0,a.Z)(e,h);return(0,r.kt)("wrapper",(0,o.Z)({},y,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",null,"Coming from CSS"),(0,r.kt)("h3",null,"How do Styled Components work within a component?"),(0,r.kt)("p",null,"If you're familiar with importing CSS into your components (e.g. like CSSModules) you'll be used to doing something like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport styles from './styles.css';\n\nexport default class Counter extends React.Component {\n  state = { count: 0 };\n\n  increment = () => this.setState({ count: this.state.count + 1 });\n  decrement = () => this.setState({ count: this.state.count - 1 });\n\n  render() {\n    return (\n      <div className={styles.counter}>\n        <p className={styles.paragraph}>{this.state.count}</p>\n        <button className={styles.button} onClick={this.increment}>\n          +\n        </button>\n        <button className={styles.button} onClick={this.decrement}>\n          -\n        </button>\n      </div>\n    );\n  }\n}\n")),(0,r.kt)("p",null,"Because a Styled Component is the ",(0,r.kt)("em",{parentName:"p"},"combination")," of the element and the rules that style it, we'd write ",(0,r.kt)("inlineCode",{parentName:"p"},"Counter")," like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledCounter = styled.div`\n  /* ... */\n`;\nconst Paragraph = styled.p`\n  /* ... */\n`;\nconst Button = styled.button`\n  /* ... */\n`;\n\nexport default class Counter extends React.Component {\n  state = { count: 0 };\n\n  increment = () => this.setState({ count: this.state.count + 1 });\n  decrement = () => this.setState({ count: this.state.count - 1 });\n\n  render() {\n    return (\n      <StyledCounter>\n        <Paragraph>{this.state.count}</Paragraph>\n        <Button onClick={this.increment}>+</Button>\n        <Button onClick={this.decrement}>-</Button>\n      </StyledCounter>\n    );\n  }\n}\n")),(0,r.kt)("p",null,'Note that we added a "Styled" prefix to ',(0,r.kt)("inlineCode",{parentName:"p"},"StyledCounter")," so that the React component ",(0,r.kt)("inlineCode",{parentName:"p"},"Counter")," and the Styled Component ",(0,r.kt)("inlineCode",{parentName:"p"},"StyledCounter")," don't clash names but remain easily identifiable in the React Developer Tools and Web Inspector."),(0,r.kt)("h3",null,"Define Styled Components outside of the render method"),(0,r.kt)("p",null,"It is important to define your styled components outside of the render method, otherwise it will be recreated on every single render pass. Defining a styled component within the render method will thwart caching and drastically slow down rendering speed, and should be avoided."),(0,r.kt)("p",null,"Write your styled components the recommended way:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"const StyledWrapper = styled.div`\n  /* ... */\n`;\n\nconst Wrapper = ({ message }) => {\n  return <StyledWrapper>{message}</StyledWrapper>;\n};\n")),(0,r.kt)("p",null,"Instead of:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"const Wrapper = ({ message }) => {\n  // WARNING: THIS IS VERY VERY BAD AND SLOW, DO NOT DO THIS!!!\n  const StyledWrapper = styled.div`\n    /* ... */\n  `;\n\n  return <StyledWrapper>{message}</StyledWrapper>;\n};\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Recommended reading"),": ",(0,r.kt)("a",{parentName:"p",href:"https://twitter.com/talialongname"},"Talia Marcassa"),"\nwrote a great review of real-world usage, featuring lots of solid practical insights\nand comparisons with alternatives, in ",(0,r.kt)("a",{parentName:"p",href:"https://medium.com/building-crowdriff/styled-components-to-use-or-not-to-use-a6bb4a7ffc21"},"Styled Components: To Use or Not to Use?")),(0,r.kt)("h3",null,"Pseudoelements, pseudoselectors, and nesting"),(0,r.kt)("p",null,"The preprocessor we use, ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/thysultan/stylis.js"},"stylis"),", supports scss-like syntax for automatically nesting styles."),(0,r.kt)("p",null,"Through this preprocessing, styled-components supports some advanced selector patterns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"&")," a single ampersand refers to ",(0,r.kt)("strong",{parentName:"p"},"all instances")," of the component; it is used for applying broad overrides:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-react"},'const Thing = styled.div.attrs((/* props */) => ({ tabIndex: 0 }))`\n  color: blue;\n\n  &:hover {\n    color: red; // <Thing> when hovered\n  }\n\n  & ~ & {\n    background: tomato; // <Thing> as a sibling of <Thing>, but maybe not directly next to it\n  }\n\n  & + & {\n    background: lime; // <Thing> next to <Thing>\n  }\n\n  &.something {\n    background: orange; // <Thing> tagged with an additional CSS class ".something"\n  }\n\n  .something-else & {\n    border: 1px solid; // <Thing> inside another element labeled ".something-else"\n  }\n`\n\nrender(\n  <React.Fragment>\n    <Thing>Hello world!</Thing>\n    <Thing>How ya doing?</Thing>\n    <Thing className="something">The sun is shining...</Thing>\n    <div>Pretty nice day today.</div>\n    <Thing>Don\'t you think?</Thing>\n    <div className="something-else">\n      <Thing>Splendid.</Thing>\n    </div>\n  </React.Fragment>\n)\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"&&")," a double ampersand refers to ",(0,r.kt)("strong",{parentName:"p"},"an instance")," of the component; this is useful if you're doing conditional styling overrides and don't want a style to apply to ",(0,r.kt)("em",{parentName:"p"},"all instances")," of a particular component:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-react"},'const Input = styled.input.attrs({ type: "checkbox" })``;\n\nconst Label = styled.label`\n  align-items: center;\n  display: flex;\n  gap: 8px;\n  margin-bottom: 8px;\n`\n\nconst LabelText = styled.span`\n  ${(props) => {\n    switch (props.$mode) {\n      case "dark":\n        return css`\n          background-color: black;\n          color: white;\n          ${Input}:checked + && {\n            color: blue;\n          }\n        `;\n      default:\n        return css`\n          background-color: white;\n          color: black;\n          ${Input}:checked + && {\n            color: red;\n          }\n        `;\n    }\n  }}\n`;\n\nrender(\n  <React.Fragment>\n    <Label>\n      <Input defaultChecked />\n      <LabelText>Foo</LabelText>\n    </Label>\n    <Label>\n      <Input />\n      <LabelText $mode="dark">Foo</LabelText>\n    </Label>\n    <Label>\n      <Input defaultChecked />\n      <LabelText>Foo</LabelText>\n    </Label>\n    <Label>\n      <Input defaultChecked />\n      <LabelText $mode="dark">Foo</LabelText>\n    </Label>\n  </React.Fragment>\n)\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"&&"),' a double ampersand alone has a special behavior called a "precedence boost"; this can be useful if you are dealing with a mixed styled-components and vanilla CSS environment where there might be conflicting styles:'),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-react"}," const Thing = styled.div`\n   && {\n     color: blue;\n   }\n `\n\n const GlobalStyle = createGlobalStyle`\n   div${Thing} {\n     color: red;\n   }\n `\n\n render(\n   <React.Fragment>\n     <GlobalStyle />\n     <Thing>\n       I'm blue, da ba dee da ba daa\n     </Thing>\n   </React.Fragment>\n )\n")))),(0,r.kt)("p",null,"If you put selectors in without the ampersand, they will refer to children of the component."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-react"},'const Thing = styled.div`\n  color: blue;\n\n  .something {\n    border: 1px solid; // an element labeled ".something" inside <Thing>\n    display: block;\n  }\n`\n\nrender(\n  <Thing>\n    <label htmlFor="foo-button" className="something">Mystery button</label>\n    <button id="foo-button">What do I do?</button>\n  </Thing>\n)\n')))}k.isMDXComponent=!0;var g=["components"],f={};function w(e){var t=e.components,n=(0,a.Z)(e,g);return(0,r.kt)("wrapper",(0,o.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",null,"Installation"),(0,r.kt)("p",null,"Installing styled-components only takes a single command and you're ready to roll:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"# with npm\nnpm install --save styled-components\n\n# with yarn\nyarn add styled-components\n")),(0,r.kt)("p",null,"If you use a package manager like ",(0,r.kt)("a",{parentName:"p",href:"https://yarnpkg.com/"},"yarn"),' that supports the "resolutions" package.json field, we also highly recommend you add an entry to it as well corresponding to the major version range. This helps avoid an entire class of problems that arise from multiple versions of styled-components being installed in your project.'),(0,r.kt)("p",null,"In ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "resolutions": {\n    "styled-components": "^5"\n  }\n}\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"It's highly recommended (but not required) to also use the ",(0,r.kt)("a",{parentName:"p",href:"/docs/tooling#babel-plugin"},"Babel plugin"),". It offers many benefits like more legible class names, server-side rendering compatibility, smaller bundles, and more.")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Click here to see alternative CDN installation instructions"),(0,r.kt)("p",null,'If you\'re not using a module bundler or package manager we also have a global ("UMD") build hosted on the ',(0,r.kt)("a",{parentName:"p",href:"http://unpkg.com"},"unpkg")," CDN. Simply add the following ",(0,r.kt)("inlineCode",{parentName:"p"},"<script>")," tag to the bottom of your HTML file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<script src="https://unpkg.com/styled-components/dist/styled-components.min.js"><\/script>\n')),(0,r.kt)("p",null,"Once you've added ",(0,r.kt)("inlineCode",{parentName:"p"},"styled-components")," you will have access to the global ",(0,r.kt)("inlineCode",{parentName:"p"},"window.styled")," variable."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const Component = window.styled.div`\n  color: red;\n`\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"This style of usage requires the ",(0,r.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/cdn-links.html"},"react CDN bundles")," and the ",(0,r.kt)("a",{parentName:"p",href:"https://unpkg.com/react-is/umd/react-is.production.min.js"},(0,r.kt)("inlineCode",{parentName:"a"},"react-is")," CDN bundle")," to be on the page as well (before the styled-components script.)"))))}w.isMDXComponent=!0;var b=["components"],N={};function v(e){var t=e.components,n=(0,a.Z)(e,b);return(0,r.kt)("wrapper",(0,o.Z)({},N,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",null,"Passed props"),(0,r.kt)("p",null,"If the styled target is a simple element (e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"styled.div"),"), styled-components passes through any known HTML attribute to the DOM. If it is a custom React component (e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"styled(MyComponent)"),"), styled-components passes through all props."),(0,r.kt)("p",null,"This example shows how all props of the Input component are passed on to the\nDOM node that is mounted, as with React elements."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-react"},'// Create an Input component that\'ll render an <input> tag with some styles\nconst Input = styled.input`\n  padding: 0.5em;\n  margin: 0.5em;\n  color: ${props => props.inputColor || "palevioletred"};\n  background: papayawhip;\n  border: none;\n  border-radius: 3px;\n`;\n\n// Render a styled text input with the standard input color, and one with a custom input color\nrender(\n  <div>\n    <Input defaultValue="@probablyup" type="text" />\n    <Input defaultValue="@geelen" type="text" inputColor="rebeccapurple" />\n  </div>\n);\n')),(0,r.kt)("p",null,"Note how the ",(0,r.kt)("inlineCode",{parentName:"p"},"inputColor")," prop is not passed to the DOM, but ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"defaultValue")," are. That is styled-components being smart enough to filter non-standard attributes automatically for you."))}v.isMDXComponent=!0;var C=n(6885),x=["components"],T={};function S(e){var t=e.components,n=(0,a.Z)(e,x);return(0,r.kt)("wrapper",(0,o.Z)({},T,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",null,"Adapting based on props"),(0,r.kt)("p",null,'You can pass a function ("interpolations") to a styled component\'s template literal to adapt it based on its props.'),(0,r.kt)("p",null,"This button component has a primary state that changes its color. When setting the ",(0,r.kt)(C.Z,{mdxType:"Code"},"primary")," prop to true, we are swapping out its background and text color."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-react"},'const Button = styled.button`\n  /* Adapt the colors based on primary prop */\n  background: ${props => props.primary ? "palevioletred" : "white"};\n  color: ${props => props.primary ? "white" : "palevioletred"};\n\n  font-size: 1em;\n  margin: 1em;\n  padding: 0.25em 1em;\n  border: 2px solid palevioletred;\n  border-radius: 3px;\n`;\n\nrender(\n  <div>\n    <Button>Normal</Button>\n    <Button primary>Primary</Button>\n  </div>\n);\n')))}S.isMDXComponent=!0;var I=["components"],M={};function Z(e){var t=e.components,n=(0,a.Z)(e,I);return(0,r.kt)("wrapper",(0,o.Z)({},M,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",null,"Styling any component"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"styled")," method works perfectly on all of your own or any third-party component, as long as they attach the passed ",(0,r.kt)("inlineCode",{parentName:"p"},"className")," prop to a DOM element."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"If you are using ",(0,r.kt)("inlineCode",{parentName:"p"},"react-native")," keep in mind to use ",(0,r.kt)("inlineCode",{parentName:"p"},"style")," instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"className"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-react"},"// This could be react-router-dom's Link for example\nconst Link = ({ className, children }) => (\n  <a className={className}>\n    {children}\n  </a>\n);\n\nconst StyledLink = styled(Link)`\n  color: palevioletred;\n  font-weight: bold;\n`;\n\nrender(\n  <div>\n    <Link>Unstyled, boring Link</Link>\n    <br />\n    <StyledLink>Styled, exciting Link</StyledLink>\n  </div>\n);\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"You can also pass tag names into the ",(0,r.kt)("inlineCode",{parentName:"p"},"styled()")," factory call, like so: ",(0,r.kt)("inlineCode",{parentName:"p"},'styled("div")'),". In fact, the ",(0,r.kt)("inlineCode",{parentName:"p"},"styled.tagname")," helpers are just aliases that do the same.")))}Z.isMDXComponent=!0;var B=["components"],L={};function R(e){var t=e.components,n=(0,a.Z)(e,B);return(0,r.kt)("wrapper",(0,o.Z)({},L,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",null,"Extending Styles"),(0,r.kt)("p",null,"Quite frequently you might want to use a component, but change it slightly for a single case. Now, you could pass in an interpolated function and change them based on some props, but that's quite a lot of effort for overriding the styles once."),(0,r.kt)("p",null,"To easily make a new component that inherits the styling of another, just wrap it in the ",(0,r.kt)("inlineCode",{parentName:"p"},"styled()")," constructor. Here we use the button from the last section and create a special one, extending it with some color-related styling:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-react"},"// The Button from the last section without the interpolations\nconst Button = styled.button`\n  color: palevioletred;\n  font-size: 1em;\n  margin: 1em;\n  padding: 0.25em 1em;\n  border: 2px solid palevioletred;\n  border-radius: 3px;\n`;\n\n// A new component based on Button, but with some override styles\nconst TomatoButton = styled(Button)`\n  color: tomato;\n  border-color: tomato;\n`;\n\nrender(\n  <div>\n    <Button>Normal Button</Button>\n    <TomatoButton>Tomato Button</TomatoButton>\n  </div>\n);\n")),(0,r.kt)("p",null,"We can see that the new ",(0,r.kt)("inlineCode",{parentName:"p"},"TomatoButton")," still resembles ",(0,r.kt)("inlineCode",{parentName:"p"},"Button"),", while we have only added two new rules."),(0,r.kt)("p",null,"In some cases you might want to change which tag or component a styled component renders. This is common when building a navigation bar for example, where there are a mix of anchor links and buttons but they should be styled identically."),(0,r.kt)("p",null,"For this situation, we have an escape hatch. You can use the ",(0,r.kt)("a",{parentName:"p",href:"/docs/api#as-polymorphic-prop"},(0,r.kt)("inlineCode",{parentName:"a"},'"as" polymorphic prop'))," to dynamically swap out the element that receives the styles you wrote:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-react"},'const Button = styled.button`\n  display: inline-block;\n  color: palevioletred;\n  font-size: 1em;\n  margin: 1em;\n  padding: 0.25em 1em;\n  border: 2px solid palevioletred;\n  border-radius: 3px;\n  display: block;\n`;\n\nconst TomatoButton = styled(Button)`\n  color: tomato;\n  border-color: tomato;\n`;\n\nrender(\n  <div>\n    <Button>Normal Button</Button>\n    <Button as="a" href="#">Link with Button styles</Button>\n    <TomatoButton as="a" href="#">Link with Tomato Button styles</TomatoButton>\n  </div>\n);\n')),(0,r.kt)("p",null,"This works perfectly fine with custom components too!"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-react"},"const Button = styled.button`\n  display: inline-block;\n  color: palevioletred;\n  font-size: 1em;\n  margin: 1em;\n  padding: 0.25em 1em;\n  border: 2px solid palevioletred;\n  border-radius: 3px;\n  display: block;\n`;\n\nconst ReversedButton = props => <Button {...props} children={props.children.split('').reverse()} />\n\nrender(\n  <div>\n    <Button>Normal Button</Button>\n    <Button as={ReversedButton}>Custom Button with Normal Button styles</Button>\n  </div>\n);\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"If you are still on an older version than v4, you can use the ",(0,r.kt)("a",{parentName:"p",href:"/docs/api#withcomponent"},(0,r.kt)("inlineCode",{parentName:"a"},".withComponent"))," or ",(0,r.kt)("a",{parentName:"p",href:"/docs/api#deprecated-extend"},(0,r.kt)("inlineCode",{parentName:"a"},".extend"))," API's to achieve the same result as with the ",(0,r.kt)("a",{parentName:"p",href:"/docs/api#as-polymorphic-prop"},(0,r.kt)("inlineCode",{parentName:"a"},'"as" prop')),", but note that this is discouraged as with v4 ",(0,r.kt)("a",{parentName:"p",href:"/releases#breaking-changes"},(0,r.kt)("inlineCode",{parentName:"a"},".extend")," was removed")," and ",(0,r.kt)("inlineCode",{parentName:"p"},".withComponent")," was marked as a candidate for future deprecation.")))}R.isMDXComponent=!0;var j=["components"],D={};function A(e){var t=e.components,n=(0,a.Z)(e,j);return(0,r.kt)("wrapper",(0,o.Z)({},D,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",null,"Attaching additional props | v2"),(0,r.kt)("p",null,"To avoid unnecessary wrappers that just pass on some props to the rendered component, or element, you can use the ",(0,r.kt)("a",{parentName:"p",href:"/docs/api#attrs"},(0,r.kt)("inlineCode",{parentName:"a"},".attrs")," constructor"),'. It allows you to attach additional props (or "attributes") to a component.'),(0,r.kt)("p",null,"This way you can for example attach static props to an element, or pass a third-party prop like ",(0,r.kt)("inlineCode",{parentName:"p"},"activeClassName")," to React Router's Link component. Furthermore you can also attach more dynamic props to a component. The ",(0,r.kt)("inlineCode",{parentName:"p"},".attrs")," object also takes functions, that receive the props that the component receives. The return value will be merged into the resulting props as well."),(0,r.kt)("p",null,"Here we render an ",(0,r.kt)("inlineCode",{parentName:"p"},"Input")," component and attach some dynamic and static attributes to it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-react"},'const Input = styled.input.attrs(props => ({\n  // we can define static props\n  type: "text",\n\n  // or we can define dynamic ones\n  size: props.size || "1em",\n}))`\n  color: palevioletred;\n  font-size: 1em;\n  border: 2px solid palevioletred;\n  border-radius: 3px;\n\n  /* here we use the dynamically computed prop */\n  margin: ${props => props.size};\n  padding: ${props => props.size};\n`;\n\nrender(\n  <div>\n    <Input placeholder="A small text input" />\n    <br />\n    <Input placeholder="A bigger text input" size="2em" />\n  </div>\n);\n')),(0,r.kt)("p",null,"As you can see, we get access to our newly created props in the interpolations, and the ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," attribute is passed down to the element."),(0,r.kt)("h3",null,"Overriding .attrs"),(0,r.kt)("p",null,"Notice that when wrapping styled components, ",(0,r.kt)("inlineCode",{parentName:"p"},".attrs")," are applied from the innermost styled component to the outermost styled component."),(0,r.kt)("p",null,"This allows each wrapper to ",(0,r.kt)("strong",{parentName:"p"},"override")," nested uses of ",(0,r.kt)("inlineCode",{parentName:"p"},".attrs"),", similarly to how css properties defined later in a stylesheet override previous declarations."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Input"),"'s ",(0,r.kt)("inlineCode",{parentName:"p"},".attrs")," are applied first, and then ",(0,r.kt)("inlineCode",{parentName:"p"},"PasswordInput"),"'s ",(0,r.kt)("inlineCode",{parentName:"p"},".attrs"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-react"},'const Input = styled.input.attrs(props => ({\n  type: "text",\n  size: props.size || "1em",\n}))`\n  border: 2px solid palevioletred;\n  margin: ${props => props.size};\n  padding: ${props => props.size};\n`;\n\n// Input\'s attrs will be applied first, and then this attrs obj\nconst PasswordInput = styled(Input).attrs({\n  type: "password",\n})`\n  // similarly, border will override Input\'s border\n  border: 2px solid aqua;\n`;\n\nrender(\n  <div>\n    <Input placeholder="A bigger text input" size="2em" />\n    <br />\n    {/* Notice we can still use the size attr from Input */}\n    <PasswordInput placeholder="A bigger password input" size="2em" />\n  </div>\n);\n')),(0,r.kt)("p",null,"This is why ",(0,r.kt)("inlineCode",{parentName:"p"},"PasswordInput")," is of a password type, but still uses the ",(0,r.kt)("inlineCode",{parentName:"p"},"size")," attribute from ",(0,r.kt)("inlineCode",{parentName:"p"},"Input"),"."))}A.isMDXComponent=!0;var z=["components"],q={};function P(e){var t=e.components,n=(0,a.Z)(e,z);return(0,r.kt)("wrapper",(0,o.Z)({},q,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",null,"Animations"),(0,r.kt)("p",null,"CSS animations with ",(0,r.kt)("inlineCode",{parentName:"p"},"@keyframes")," aren't scoped to a single component but you still don't want them to be global to avoid name collisions. This is why we export a ",(0,r.kt)("inlineCode",{parentName:"p"},"keyframes")," helper which will generate a unique instance that you can use throughout your app:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-react"},"// Create the keyframes\nconst rotate = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n\n  to {\n    transform: rotate(360deg);\n  }\n`;\n\n// Here we create a component that will rotate everything we pass in over two seconds\nconst Rotate = styled.div`\n  display: inline-block;\n  animation: ${rotate} 2s linear infinite;\n  padding: 2rem 1rem;\n  font-size: 1.2rem;\n`;\n\nrender(\n  <Rotate>&lt; \ud83d\udc85\ud83c\udffe &gt;</Rotate>\n);\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Keyframes are not supported by ",(0,r.kt)("inlineCode",{parentName:"p"},"react-native"),". Instead, use the ",(0,r.kt)("a",{parentName:"p",href:"https://stackoverflow.com/questions/50891046/rotate-an-svg-in-react-native/50891225#50891225"},(0,r.kt)("inlineCode",{parentName:"a"},"ReactNative.Animated")," API"),".")),(0,r.kt)("p",null,"Keyframes are lazily injected when they're used, which is how they can be code-split, so you have to use ",(0,r.kt)("a",{parentName:"p",href:"/docs/api#css"},"the ",(0,r.kt)("inlineCode",{parentName:"a"},"css")," helper")," for shared style fragments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const rotate = keyframes``\n\n// \u274c This will throw an error!\nconst styles = `\n  animation: ${rotate} 2s linear infinite;\n`\n\n// \u2705 This will work as intended\nconst styles = css`\n  animation: ${rotate} 2s linear infinite;\n`\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"This used to work in v3 and below where we didn't code-split keyframes. If you're upgrading from v3, make sure that all your shared style fragments are using the ",(0,r.kt)("inlineCode",{parentName:"p"},"css")," helper!")))}P.isMDXComponent=!0;var F=["components"],E={};function V(e){var t=e.components,n=(0,a.Z)(e,F);return(0,r.kt)("wrapper",(0,o.Z)({},E,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",null,"React Native"),(0,r.kt)("p",null,"styled-components can be used with React Native in the same way and with the\nsame import. Try this example with ",(0,r.kt)("a",{parentName:"p",href:"https://snack.expo.io/@danielmschmidt/styled-components"},"Snack by Expo"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport styled from 'styled-components/native'\n\nconst StyledView = styled.View`\n  background-color: papayawhip;\n`\n\nconst StyledText = styled.Text`\n  color: palevioletred;\n`\n\nclass MyReactNativeComponent extends React.Component {\n  render() {\n    return (\n      <StyledView>\n        <StyledText>Hello World!</StyledText>\n      </StyledView>\n    )\n  }\n}\n")),(0,r.kt)("p",null,"We also support more complex styles (like ",(0,r.kt)("inlineCode",{parentName:"p"},"transform"),"), which would normally\nbe an array, and shorthands (e.g. for ",(0,r.kt)("inlineCode",{parentName:"p"},"margin"),") thanks to\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/styled-components/css-to-react-native"},(0,r.kt)("inlineCode",{parentName:"a"},"css-to-react-native")),"!"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Note that the ",(0,r.kt)("inlineCode",{parentName:"p"},"flex")," property works like CSS shorthand, and not the legacy\n",(0,r.kt)("inlineCode",{parentName:"p"},"flex")," property in React Native. Setting ",(0,r.kt)("inlineCode",{parentName:"p"},"flex: 1")," sets ",(0,r.kt)("inlineCode",{parentName:"p"},"flexShrink"),"\nto ",(0,r.kt)("inlineCode",{parentName:"p"},"1")," in addition to setting ",(0,r.kt)("inlineCode",{parentName:"p"},"flexGrow")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"1")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"flexBasis")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),".")),(0,r.kt)("p",null,"Imagine how you'd write the property in React Native, guess how you'd transfer\nit to CSS, and you're probably right:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"const RotatedBox = styled.View`\n  transform: rotate(90deg);\n  text-shadow-offset: 10px 5px;\n  font-variant: small-caps;\n  margin: 5px 7px 2px;\n`\n")),(0,r.kt)("p",null,"Some of the differences to the web-version are, that you cannot use the\n",(0,r.kt)("inlineCode",{parentName:"p"},"keyframes")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"createGlobalStyle")," helpers since React Native doesn't support\nkeyframes or global styles. We will also warn you if you use media queries or\nnest your CSS."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"In v2 we support percentages. To make this possible we need to enforce units\nfor all shorthands. If you're migrating to v2,\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/styled-components/styled-components-native-code-mod"},"a codemod is available"),".")),(0,r.kt)("h3",null,"Simpler usage with the metro bundler"),(0,r.kt)("p",null,"If you'd prefer to just import ",(0,r.kt)("inlineCode",{parentName:"p"},"styled-components")," instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"styled-components/native"),", you can add a ",(0,r.kt)("a",{parentName:"p",href:"https://facebook.github.io/metro/docs/configuration#resolvermainfields"},(0,r.kt)("inlineCode",{parentName:"a"},"resolverMainFields")," configuration")," that includes ",(0,r.kt)("inlineCode",{parentName:"p"},'"react-native"'),". This used to be supported in metro by default (and currently does work in haul) but appears to have been removed at some point."))}V.isMDXComponent=!0;var W=["components"],X={},_=function(e){var t=e.children;return(0,r.kt)(s.Z,{title:"Basics",description:"Get Started with styled-components basics."},t)};function H(e){var t=e.components,n=(0,a.Z)(e,W);return(0,r.kt)(_,(0,o.Z)({},X,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(d,{mdxType:"Motivation"}),(0,r.kt)(w,{mdxType:"Installation"}),(0,r.kt)(u,{mdxType:"GettingStarted"}),(0,r.kt)(S,{mdxType:"AdaptingBasedOnProps"}),(0,r.kt)(R,{mdxType:"ExtendingStyles"}),(0,r.kt)(Z,{mdxType:"StylingAnyComponents"}),(0,r.kt)(v,{mdxType:"PassedProps"}),(0,r.kt)(k,{mdxType:"ComingFromCSS"}),(0,r.kt)(A,{mdxType:"AttachingAdditionalProps"}),(0,r.kt)(P,{mdxType:"Animations"}),(0,r.kt)(V,{mdxType:"ReactNative"}),(0,r.kt)(i.Z,{href:"/docs/advanced",title:"Advanced",mdxType:"NextPage"}))}H.isMDXComponent=!0},9463:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/basics",function(){return n(4627)}])},1163:function(e,t,n){e.exports=n(9898)},6864:function(e,t,n){"use strict";function o(){return o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},o.apply(this,arguments)}n.d(t,{Z:function(){return o}})}},function(e){e.O(0,[791,774,888,179],(function(){return t=9463,e(e.s=t);var t}));var t=e.O();_N_E=t}]);
//# sourceMappingURL=basics-6403662ac4622d44.js.map