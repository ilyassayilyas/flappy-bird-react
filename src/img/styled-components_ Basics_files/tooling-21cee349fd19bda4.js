(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[885],{4498:function(e,t,n){"use strict";n.d(t,{E:function(){return r}});var o=n(7462),a=n(7294),l=n(6591),r=a.forwardRef((function(e,t){return a.createElement(l.r,(0,o.Z)({iconAttrs:{fill:"currentColor",xmlns:"http://www.w3.org/2000/svg"},iconVerticalAlign:"middle",iconViewBox:"0 0 496 512"},e,{ref:t}),a.createElement("path",{fill:"currentColor",d:"M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3.3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5.3-6.2 2.3zm44.2-1.7c-2.9.7-4.9 2.6-4.6 4.9.3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3.7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3.3 2.9 2.3 3.9 1.6 1 3.6.7 4.3-.7.7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3.7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3.7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z"}))}));r.displayName="Github"},927:function(e,t,n){"use strict";n.d(t,{H:function(){return r}});var o=n(7462),a=n(7294),l=n(6591),r=a.forwardRef((function(e,t){return a.createElement(l.r,(0,o.Z)({iconAttrs:{fill:"currentColor",xmlns:"http://www.w3.org/2000/svg"},iconVerticalAlign:"middle",iconViewBox:"0 0 512 512"},e,{ref:t}),a.createElement("path",{fill:"currentColor",d:"M71.5 142.3c.6-5.9-1.7-11.8-6.1-15.8L20.3 72.1V64h140.2l108.4 237.7L364.2 64h133.7v8.1l-38.6 37c-3.3 2.5-5 6.7-4.3 10.8v272c-.7 4.1 1 8.3 4.3 10.8l37.7 37v8.1H307.3v-8.1l39.1-37.9c3.8-3.8 3.8-5 3.8-10.8V171.2L241.5 447.1h-14.7L100.4 171.2v184.9c-1.1 7.8 1.5 15.6 7 21.2l50.8 61.6v8.1h-144v-8L65 377.3c5.4-5.6 7.9-13.5 6.5-21.2V142.3z"}))}));r.displayName="MediumM"},8410:function(e,t,n){"use strict";n.d(t,{x:function(){return r}});var o=n(7462),a=n(7294),l=n(6591),r=a.forwardRef((function(e,t){return a.createElement(l.r,(0,o.Z)({iconAttrs:{fill:"currentColor",xmlns:"http://www.w3.org/2000/svg"},iconVerticalAlign:"middle",iconViewBox:"0 0 24 24"},e,{ref:t}),a.createElement("path",{fill:"none",d:"M0 0h24v24H0z"}),a.createElement("path",{d:"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"}))}));r.displayName="Close"},2524:function(e,t,n){"use strict";n.d(t,{W:function(){return r}});var o=n(7462),a=n(7294),l=n(6591),r=a.forwardRef((function(e,t){return a.createElement(l.r,(0,o.Z)({iconAttrs:{fill:"currentColor",xmlns:"http://www.w3.org/2000/svg"},iconVerticalAlign:"middle",iconViewBox:"0 0 24 24"},e,{ref:t}),a.createElement("path",{fill:"none",d:"M0 0h24v24H0V0z"}),a.createElement("path",{d:"M7.41 8.59L12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z"}))}));r.displayName="KeyboardArrowDown"},5595:function(e,t,n){"use strict";n.d(t,{o:function(){return r}});var o=n(7462),a=n(7294),l=n(6591),r=a.forwardRef((function(e,t){return a.createElement(l.r,(0,o.Z)({iconAttrs:{fill:"currentColor",xmlns:"http://www.w3.org/2000/svg"},iconVerticalAlign:"middle",iconViewBox:"0 0 24 24"},e,{ref:t}),a.createElement("path",{fill:"none",d:"M0 0h24v24H0z"}),a.createElement("path",{d:"M15.5 14h-.79l-.28-.27A6.471 6.471 0 0016 9.5 6.5 6.5 0 109.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"}))}));r.displayName="Search"},710:function(e,t,n){"use strict";var o=n(2777),a=n(2262),l=n(748),r=n(5959),i=n(3553),s=n(7247),p=n(9499),c=n(7294),m=n(4505),u=n(8461),d=n(6390),h=n(5893);function g(e){var t=function(){if("undefined"===typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"===typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,o=(0,s.Z)(e);if(t){var a=(0,s.Z)(this).constructor;n=Reflect.construct(o,arguments,a)}else n=o.apply(this,arguments);return(0,i.Z)(this,n)}}var k=function(e){(0,r.Z)(n,e);var t=g(n);function n(){var e;(0,o.Z)(this,n);for(var a=arguments.length,r=new Array(a),i=0;i<a;i++)r[i]=arguments[i];return e=t.call.apply(t,[this].concat(r)),(0,p.Z)((0,l.Z)(e),"state",{isSideFolded:!0,isMobileNavFolded:!0}),(0,p.Z)((0,l.Z)(e),"onSideToggle",(function(){e.setState({isSideFolded:!e.state.isSideFolded,isMobileNavFolded:!0})})),(0,p.Z)((0,l.Z)(e),"onMobileNavToggle",(function(){e.setState({isMobileNavFolded:!e.state.isMobileNavFolded,isSideFolded:!0})})),(0,p.Z)((0,l.Z)(e),"onRouteChange",(function(){e.setState({isSideFolded:!0,isMobileNavFolded:!0})})),e}return(0,a.Z)(n,[{key:"render",value:function(){var e=this.props,t=e.children,n=e.title,o=e.description,a=e.useDocsSidebarMenu,l=void 0===a||a,r=e.pages,i=this.state,s=i.isSideFolded,p=i.isMobileNavFolded;return(0,h.jsxs)(d.W2,{children:[(0,h.jsx)(m.Z,{title:"styled-components".concat(n?": ".concat(n):""),description:o,children:(0,h.jsx)("meta",{name:"robots",content:"noodp"})}),(0,h.jsx)(u.Z,{useDocsSidebarMenu:l,isSideFolded:s,isMobileNavFolded:p,pages:r,onSideToggle:this.onSideToggle,onMobileNavToggle:this.onMobileNavToggle,onRouteChange:this.onRouteChange}),(0,h.jsxs)(d.VY,{moveRight:!s,"data-e2e-id":"content",children:[(0,h.jsx)(d.Dx,{children:n}),t]})]})}}]),n}(c.Component);(0,p.Z)(k,"defaultProps",{title:"",description:""}),t.Z=k},8916:function(e,t,n){"use strict";n.d(t,{Z:function(){return y}});var o=n(186),a=n(7462),l=n(7294),r=n(6591),i=l.forwardRef((function(e,t){return l.createElement(r.r,(0,a.Z)({iconAttrs:{fill:"currentColor",xmlns:"http://www.w3.org/2000/svg"},iconVerticalAlign:"middle",iconViewBox:"0 0 24 24"},e,{ref:t}),l.createElement("path",{fill:"none",d:"M0 0h24v24H0V0z"}),l.createElement("path",{d:"M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z"}))}));i.displayName="KeyboardArrowRight";var s=n(6549),p=n(2250),c=n(5184),m=n(3401),u=n(688),d=n(5893),h=(0,o.ZP)(p.ZP).attrs((function(){return{unstyled:!0}})).withConfig({displayName:"NextPage__Wrapper",componentId:"sc-xdq90t-0"})(["display:flex;flex-direction:row;align-items:stretch;justify-content:flex-end;width:100%;padding:"," ",";text-align:right;font-family:",";",";"],(0,s.Z)(40),(0,s.Z)(20),u.Cc,(0,m.a)((0,o.iv)(["text-align:left;justify-content:center;padding:"," ",";"],(0,s.Z)(30),(0,s.Z)(20)))),g=o.ZP.h3.withConfig({displayName:"NextPage__Text",componentId:"sc-xdq90t-1"})(["font-weight:normal;padding-right:",";margin:0;"],(0,s.Z)(20)),k=o.ZP.h2.withConfig({displayName:"NextPage__PageName",componentId:"sc-xdq90t-2"})(["font-weight:600;padding-right:",";margin:0;"],(0,s.Z)(20)),f=(0,o.ZP)(i).withConfig({displayName:"NextPage__Icon",componentId:"sc-xdq90t-3"})(["color:",";width:",";"],c.BA,(0,s.Z)(30)),y=function(e){var t=e.title,n=e.href;return(0,d.jsxs)(h,{unstyled:!0,href:n,children:[(0,d.jsxs)("div",{children:[(0,d.jsx)(g,{children:"Continue on the next page"}),(0,d.jsx)(k,{children:t})]}),(0,d.jsx)("div",{children:(0,d.jsx)(f,{})})]})}},9257:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return te}});var o=n(6864),a=n(4730),l=n(7294),r=n(3905),i=n(710),s=n(8916),p=["components"],c={};function m(e){var t=e.components,n=(0,a.Z)(e,p);return(0,r.kt)("wrapper",(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",null,"Babel Plugin"),(0,r.kt)("p",null,"This plugin adds support for server-side rendering, minification of styles, and a nicer debugging experience."),(0,r.kt)("h3",null,"Usage"),(0,r.kt)("p",null,"Install the babel-plugin first:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"npm install --save-dev babel-plugin-styled-components\n")),(0,r.kt)("p",null,"Then add it to your babel configuration like so:"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u26a0\ufe0f The plugin call order in your ",(0,r.kt)("inlineCode",{parentName:"p"},".babelrc")," file matters. If you're using the env property in your babel configuration, then putting this plugin into the plugins array won't suffice. Instead it needs to be put into each env's plugins array to maintain it being executed first. See ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/styled-components/babel-plugin-styled-components/issues/78"},"this")," for more information.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'{\n  "plugins": ["babel-plugin-styled-components"]\n}\n')),(0,r.kt)("h3",null,"Server-side rendering"),(0,r.kt)("p",null,"By adding a unique identifier to every styled component, this plugin avoids checksum mismatches due to different class generation on the client and on the server. If you do not use this plugin and try to server-side render styled-components React will complain with an HTML attribute mismatch warning during rehydration."),(0,r.kt)("p",null,"You can disable it if necessary with the ",(0,r.kt)("inlineCode",{parentName:"p"},"ssr")," option:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "plugins": [\n    [\n      "babel-plugin-styled-components",\n      {\n        "ssr": false\n      }\n    ]\n  ]\n}\n')),(0,r.kt)("h3",null,"Better debugging"),(0,r.kt)("p",null,"This option enhances the attached CSS class name on each component with richer output to help identify your components in the DOM without React DevTools. In your page source you'll see: ",(0,r.kt)("inlineCode",{parentName:"p"},'<button class="Button-asdf123 asdf123" />')," instead of just ",(0,r.kt)("inlineCode",{parentName:"p"},'<button class="asdf123" />'),"."),(0,r.kt)("p",null,"It also allows you to see the component's ",(0,r.kt)("inlineCode",{parentName:"p"},"displayName")," in React DevTools. For example, consider writing a styled component that renders a ",(0,r.kt)("inlineCode",{parentName:"p"},"button")," element, called ",(0,r.kt)("inlineCode",{parentName:"p"},"MyButton"),". It will normally show up in DevTools as ",(0,r.kt)("inlineCode",{parentName:"p"},"styled.button"),", but with the ",(0,r.kt)("inlineCode",{parentName:"p"},"displayName")," option enabled, it has the name you gave it: ",(0,r.kt)("inlineCode",{parentName:"p"},"MyButton"),"."),(0,r.kt)("p",null,"This makes it easier to find your components and to figure out where they live in your app."),(0,r.kt)("p",null,"If you don't need this feature, you can disable it with the ",(0,r.kt)("inlineCode",{parentName:"p"},"displayName")," option:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "plugins": [\n    [\n      "babel-plugin-styled-components",\n      {\n        "displayName": false\n      }\n    ]\n  ]\n}\n')),(0,r.kt)("h4",null,"Control the components ",(0,r.kt)("inlineCode",{parentName:"h4"},"displayName")),(0,r.kt)("p",null,"By default, the ",(0,r.kt)("inlineCode",{parentName:"p"},"displayName")," of a component will be prefixed with the filename in order to make the component name as unique as possible."),(0,r.kt)("p",null,"You can force the component ",(0,r.kt)("inlineCode",{parentName:"p"},"displayName")," to be solely the component name by disabling the ",(0,r.kt)("inlineCode",{parentName:"p"},"fileName")," option:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "plugins": [\n    [\n      "babel-plugin-styled-components",\n      {\n        "fileName": false\n      }\n    ]\n  ]\n}\n')),(0,r.kt)("p",null,"One example you might want to do this, is testing components with enzyme. While you can always use ",(0,r.kt)("inlineCode",{parentName:"p"},".find(ComponentName)")," it's definitely possible to search component by its displayName with ",(0,r.kt)("inlineCode",{parentName:"p"},'.find("ComponentName")'),". In the latter case you will need to disable the ",(0,r.kt)("inlineCode",{parentName:"p"},"fileName")," option. If you do want this for testing only, make sure to add this only under your test environment."),(0,r.kt)("h4",null,"Control which file names are meaningless"),(0,r.kt)("p",null,"A common pattern is to put components in ",(0,r.kt)("inlineCode",{parentName:"p"},"Button/index.jsx")," instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"Button.jsx"),". By default, if the ",(0,r.kt)("inlineCode",{parentName:"p"},"fileName")," option is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),", the plugin will generate the display name using the directory name (",(0,r.kt)("inlineCode",{parentName:"p"},'<button class="Button-asdf123 asdf123" />'),") instead of the file name (",(0,r.kt)("inlineCode",{parentName:"p"},'<button class="index-asdf123 asdf123" />'),"), because the former provides more information."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"meaninglessFileNames")," option allows to customize the list of file names that are not relevant to the description of a styled component's functionality, and hence the directory name should be used instead:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "plugins": [\n    [\n      "babel-plugin-styled-components",\n      {\n        "meaninglessFileNames": ["index", "styles"]\n      }\n    ]\n  ]\n}\n')),(0,r.kt)("p",null,"For example, adding ",(0,r.kt)("inlineCode",{parentName:"p"},"styles")," to the list would enable you to store your styled components in a ",(0,r.kt)("inlineCode",{parentName:"p"},"Button/styles.js")," file."),(0,r.kt)("p",null,"This option defaults to ",(0,r.kt)("inlineCode",{parentName:"p"},'["index"]'),"."),(0,r.kt)("p",null,"If either ",(0,r.kt)("inlineCode",{parentName:"p"},"fileName")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"displayName")," are set to ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),", this option has no effect."),(0,r.kt)("h3",null,"Minification"),(0,r.kt)("p",null,"Two types of minifications are performed by this plugin: one removes all whitespace & comments from your CSS and the other ",(0,r.kt)("a",{parentName:"p",href:"#template-string-transpilation"},"transpiles tagged template literals"),", keeping valuable bytes out of your bundles."),(0,r.kt)("p",null,"If desired, you can disable this behavior via babel configuration:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'{\n  "plugins": [\n    ["babel-plugin-styled-components", {\n      "minify": false,\n      "transpileTemplateLiterals": false\n    }]\n  ]\n}\n')),(0,r.kt)("h3",null,"Dead Code Elimination"),(0,r.kt)("p",null,'Due to how styled components are transpiled and constructed, by default minifiers cannot properly perform dead code elimination on them because they are assumed to have side effects. However, there is a feature that can be enabled to aid this process called "pure annotation".'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'{\n  "plugins": [\n    ["babel-plugin-styled-components", {\n      "pure": true\n    }]\n  ]\n}\n')),(0,r.kt)("p",null,"It utilizes a babel helper to tag each styled component and library helper with the ",(0,r.kt)("inlineCode",{parentName:"p"},"#__PURE__")," JS comment that some minifiers use to overcome the aforementioned issue."),(0,r.kt)("h3",null,"Template String Transpilation"),(0,r.kt)("p",null,"This plugin transpiles ",(0,r.kt)("inlineCode",{parentName:"p"},"styled-components")," tagged template literals down to a smaller representation than what Babel normally creates."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Wait, transpiling tagged template literals? Doesn't Babel do this natively?")," \ud83e\udd14\nWith Babel, you're likely transpiling ES2015+ JavaScript to ES5-compliant code for older browser support. The most popularly recommended base Babel presets (",(0,r.kt)("inlineCode",{parentName:"p"},"es2015")," / ",(0,r.kt)("inlineCode",{parentName:"p"},"env")," / ",(0,r.kt)("inlineCode",{parentName:"p"},"latest"),") include the ",(0,r.kt)("inlineCode",{parentName:"p"},"babel-plugin-transform-es2015-template-literals")," transform to make tagged template literals work in older browsers, but there is a caveat: output of that transform is quite verbose. It's done this way to meet specification requirements."),(0,r.kt)("p",null,"Here's an example of the transpiled code processed with ",(0,r.kt)("inlineCode",{parentName:"p"},"babel-preset-latest"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"var _templateObject = _taggedTemplateLiteral(['width: 100%;'], ['width: 100%;'])\nfunction _taggedTemplateLiteral(strings, raw) {\n  return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } }))\n}\nvar Simple = _styledComponents2.default.div(_templateObject)\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"styled-components")," does not require full spec compatibility. Our Babel plugin will transpile template literals attached to styled components to a slightly different, smaller form which still works in older browsers but has a much smaller footprint."),(0,r.kt)("p",null,"Here's the previous example with the styled-components babel plugin on and the ",(0,r.kt)("inlineCode",{parentName:"p"},"{ transpileTemplateLiterals: true }")," option:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"var Simple = _styledComponents2.default.div(['width: 100%;'])\n")),(0,r.kt)("p",null,"The plugin is also smart enough to not modify tagged template literals belonging to other libraries and use cases:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// Following will be converted:\nstyled.div``\nkeyframe``\ncss```some text` // But this will not be converted:\n\n// Here the outer template literal will be converted\n// because it's attached to the component factory,\n// but the inner template literals will not be touched:\nstyled.div`\n  color: ${light ? `white` : `black`};\n`\n")),(0,r.kt)("p",null,"You can disable this feature with the ",(0,r.kt)("inlineCode",{parentName:"p"},"transpileTemplateLiterals")," option:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "plugins": [\n    [\n      "babel-plugin-styled-components",\n      {\n        "transpileTemplateLiterals": false\n      }\n    ]\n  ]\n}\n')),(0,r.kt)("p",null,"Read more about ",(0,r.kt)("a",{parentName:"p",href:"/docs/advanced#tagged-template-literals"},"Tagged Template Literals")," in\nour dedicated section explaining them."),(0,r.kt)("h3",null,"Namespace"),(0,r.kt)("p",null,"The namespace will ensure that your class names will be unique; this setting is handy when you are working with micro frontends where class name collision can occur."),(0,r.kt)("p",null,"If desired, you can enable this behavior via babel configuration:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'{\n  "plugins": [\n    ["babel-plugin-styled-components", {\n      "namespace": "my-app"\n    }]\n  ]\n}\n')),(0,r.kt)("p",null,"Here's an example of the transpiled code processed with ",(0,r.kt)("inlineCode",{parentName:"p"},"namespace")," enabled:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"_styledComponents2.default.div.withConfig({\n  displayName: 'code__before',\n  componentId: 'my-app__sc-3rfj0a-1',\n})(['color:blue;'])\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u26a0\ufe0f This feature is available from version ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"1.11")),".")))}m.isMDXComponent=!0;var u=["components"],d={};function h(e){var t=e.components,n=(0,a.Z)(e,u);return(0,r.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",null,"Babel Macro | v4"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://babeljs.io/blog/2017/09/11/zero-config-with-babel-macros"},"Babel macros")," are quickly gaining steam as a full-featured option to allow advanced code transpilation for zero-config projects like ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/facebook/create-react-app"},"create-react-app"),"."),(0,r.kt)("p",null,"If your scaffold is set up with ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/kentcdodds/babel-plugin-macros"},(0,r.kt)("inlineCode",{parentName:"a"},"babel-plugin-macros")),", then simply use the new ",(0,r.kt)("inlineCode",{parentName:"p"},"styled-components/macro")," import instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"styled-components"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import styled, { createGlobalStyle } from 'styled-components/macro'\n\nconst Thing = styled.div`\n  color: red;\n`\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    color: 'white';\n  }\n`\n")),(0,r.kt)("p",null,"The macro incorporates all the functionality of ",(0,r.kt)("a",{parentName:"p",href:"/docs/tooling#babel-plugin"},"our babel plugin")," while allowing the unejected tooling to handle the Babel part of the build process. Special thanks to ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/lucleray"},"Luc Leray (@lucleray)")," for making this happen!"),(0,r.kt)("h3",null,"EXPERIMENTAL Config"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/kentcdodds/babel-plugin-macros"},(0,r.kt)("inlineCode",{parentName:"a"},"babel-plugin-macros"))," uses ",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/cosmiconfig"},(0,r.kt)("inlineCode",{parentName:"a"},"cosmiconfig"))," to read a ",(0,r.kt)("inlineCode",{parentName:"p"},"babel-plugin-macros")," configuration which\ncan be located in any of the following files up the directories from the\nimporting file:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},".babel-plugin-macrosrc")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},".babel-plugin-macrosrc.json")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},".babel-plugin-macrosrc.yaml")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},".babel-plugin-macrosrc.yml")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},".babel-plugin-macrosrc.js")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"babel-plugin-macros.config.js")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"babelMacros")," in ",(0,r.kt)("inlineCode",{parentName:"li"},"package.json"))),(0,r.kt)("p",null,"You can then specify the same options as ",(0,r.kt)("a",{parentName:"p",href:"/docs/tooling#babel-plugin"},"our babel plugin")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"styledComponents")," entry:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// babel-plugin-macros.config.js\nmodule.exports = {\n  // ...\n  // Other macros config\n  styledComponents: {\n    pure: true,\n  },\n}\n")),(0,r.kt)("p",null,"For more information, see ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/kentcdodds/babel-plugin-macros/blob/master/other/docs/author.md#config-experimental"},"EXPERIMENTAL config for babel-plugin-macros "),"."),(0,r.kt)("h3",null,"Enforce macro imports"),(0,r.kt)("p",null,"You may want to ensure that objects are consistently imported from the macro across your project. This can be achieved by using a ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-restricted-imports"},(0,r.kt)("inlineCode",{parentName:"a"},"no-restricted-imports"))," rule from ESLint:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'"no-restricted-imports": [\n  "error",\n  {\n    "paths": [{\n      "name": "styled-components",\n      "message": "Please import from styled-components/macro."\n    }],\n    "patterns": [\n      "!styled-components/macro"\n    ]\n  }\n]\n')))}h.isMDXComponent=!0;var g=["components"],k={};function f(e){var t=e.components,n=(0,a.Z)(e,g);return(0,r.kt)("wrapper",(0,o.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",null,"TypeScript Plugin"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/Igorbek/typescript-plugin-styled-components"},(0,r.kt)("inlineCode",{parentName:"a"},"typescript-plugin-styled-components"))," is a plugin for TypeScript that gives you a nicer debugging experience."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u26a0\ufe0f TypeScript does not allow to use any plugin or transformer directly from the command line compiler ",(0,r.kt)("inlineCode",{parentName:"p"},"tsc"),". So the plugin only works with build toolchains such as ",(0,r.kt)("inlineCode",{parentName:"p"},"webpack")," with one of TypeScript loaders. There's ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Microsoft/TypeScript/issues/16607"},"an open issue")," to bring plugins to tsc though if you want to upvote it!")),(0,r.kt)("p",null,"Please refer to ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Igorbek/typescript-plugin-styled-components"},"the project's GitHub repo")," for documentation."))}f.isMDXComponent=!0;var y=["components"],b={};function N(e){var t=e.components,n=(0,a.Z)(e,y);return(0,r.kt)("wrapper",(0,o.Z)({},b,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",null,"Jest Integration"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/styled-components/jest-styled-components"},"Jest Styled Components")," is a set of utilities for testing Styled Components with ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/facebook/jest"},"Jest"),". This package improves the snapshot testing experience and provides a brand new matcher to make expectations on the style rules."),(0,r.kt)("h3",null,"Installation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"npm install --save-dev jest-styled-components\n")),(0,r.kt)("h3",null,"Snapshot Testing"),(0,r.kt)("p",null,"When we are building a UI with Styled Components, we want to make sure the output doesn't change unexpectedly. Snapshot testing is an excellent way to test React components, and this package makes the experience even more delightful by adding the style to the snapshots."),(0,r.kt)("p",null,"Here's an example of a test:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport styled from 'styled-components'\nimport renderer from 'react-test-renderer'\nimport 'jest-styled-components'\n\nconst Button = styled.button`\n  color: red;\n`\n\ntest('it works', () => {\n  const tree = renderer.create(<Button />).toJSON()\n  expect(tree).toMatchSnapshot()\n})\n")),(0,r.kt)("p",null,"And here's an example of the resulting snapshot:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'exports[`it works 1`] = `\n.c0 {\n  color: red;\n}\n\n<button\n  className="c0"\n/>\n`\n')),(0,r.kt)("p",null,"For a real world demo, check out\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/styled-components/styled-components-website/tree/master/test"},"this website's repository"),"."),(0,r.kt)("h3",null,(0,r.kt)("inlineCode",{parentName:"h3"},"toHaveStyleRule")),(0,r.kt)("p",null,"If we only want to check whether a particular style has been applied to an element, we can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"toHaveStyleRule")," matcher. This function takes two required parameters, a property (string) and a value (string or RegExp), and an optional object to search for rules nested within an at-rule or to add modifiers to the class selector."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport styled from 'styled-components'\nimport renderer from 'react-test-renderer'\nimport 'jest-styled-components'\n\nconst Button = styled.button`\n  color: red;\n  @media (max-width: 640px) {\n    &:hover {\n      color: green;\n    }\n  }\n`\n\ntest('it works', () => {\n  const tree = renderer.create(<Button />).toJSON()\n  expect(tree).toHaveStyleRule('color', 'red')\n  expect(tree).toHaveStyleRule('color', 'green', {\n    media: '(max-width: 640px)',\n    modifier: ':hover',\n  })\n})\n")))}N.isMDXComponent=!0;var w=["components"],v={};function C(e){var t=e.components,n=(0,a.Z)(e,w);return(0,r.kt)("wrapper",(0,o.Z)({},v,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",null,"Stylelint"),(0,r.kt)("p",null,"Lint your ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/styled-components/styled-components"},"styled components")," with ",(0,r.kt)("a",{parentName:"p",href:"http://stylelint.io/"},"stylelint"),"!"),(0,r.kt)("h3",null,"Installation"),(0,r.kt)("p",null,"You need:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"stylelint")),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/styled-components/stylelint-processor-styled-components"},"stylelint-processor-styled-components"),", to extract styles from ",(0,r.kt)("inlineCode",{parentName:"li"},"styled-components")),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/styled-components/stylelint-config-styled-components"},(0,r.kt)("inlineCode",{parentName:"a"},"stylelint-config-styled-components"))," to disable stylelint rules that clash with ",(0,r.kt)("inlineCode",{parentName:"li"},"styled-components")),(0,r.kt)("li",{parentName:"ul"},"Your favorite ",(0,r.kt)("inlineCode",{parentName:"li"},"stylelint")," config! (for example ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/stylelint/stylelint-config-recommended"},(0,r.kt)("inlineCode",{parentName:"a"},"stylelint-config-recommended")),")")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"We recommend using Stylelint v9+ as this has added features that allow us to report correct line numbers on CSS syntax errors")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(npm install --save-dev \\\n  stylelint \\\n  stylelint-processor-styled-components \\\n  stylelint-config-styled-components \\\n  stylelint-config-recommended)\n")),(0,r.kt)("h3",null,"Setup"),(0,r.kt)("p",null,"Add a ",(0,r.kt)("inlineCode",{parentName:"p"},".stylelintrc")," file to the root of your project:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-JSON"},'{\n  "processors": [\n    "stylelint-processor-styled-components"\n  ],\n  "extends": [\n    "stylelint-config-recommended",\n    "stylelint-config-styled-components"\n  ]\n}\n')),(0,r.kt)("p",null,"Then you need to run ",(0,r.kt)("inlineCode",{parentName:"p"},"stylelint"),". Add a ",(0,r.kt)("inlineCode",{parentName:"p"},"lint:css")," script to your ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json")," which runs ",(0,r.kt)("inlineCode",{parentName:"p"},"stylelint")," with a glob to all of your styled components:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-JSON"},'{\n  "scripts": {\n    "lint:css":"stylelint \'./src/**/*.js\'"\n  }\n}\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"The processor ignores javascript files that don't contain any ",(0,r.kt)("inlineCode",{parentName:"p"},"styled-components"),", so don't worry about being too broad as long as you restrict it to javascript (or TypeScript).")),(0,r.kt)("p",null,"Now you can lint your CSS by running the script! \ud83c\udf89"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"npm run lint:css\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Beware that due to limitations on what is possible for Stylelint custom processors we cannot support the ",(0,r.kt)("inlineCode",{parentName:"p"},"--fix")," option")),(0,r.kt)("h4",null,"Webpack"),(0,r.kt)("p",null,"If you want to lint on build, rather than as a separate command, you can use the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/emilgoldsmith/stylelint-custom-processor-loader"},(0,r.kt)("inlineCode",{parentName:"a"},"stylelint-custom-processor-loader"))," for webpack."),(0,r.kt)("h3",null,(0,r.kt)("inlineCode",{parentName:"h3"},"stylelint-config-styled-components")),(0,r.kt)("p",null,"When using this processor a couple of stylelint rules throw errors that cannot be prevented, like ",(0,r.kt)("a",{parentName:"p",href:"https://stylelint.io/user-guide/rules/no-empty-source"},(0,r.kt)("inlineCode",{parentName:"a"},"no-empty-source"))," or ",(0,r.kt)("a",{parentName:"p",href:"https://stylelint.io/user-guide/rules/no-missing-end-of-source-newline"},(0,r.kt)("inlineCode",{parentName:"a"},"no-missing-end-of-source-newline")),". There's also a couple rules which we need to enforce, like ",(0,r.kt)("a",{parentName:"p",href:"https://stylelint.io/user-guide/rules/property-no-vendor-prefix"},(0,r.kt)("inlineCode",{parentName:"a"},"no-vendor-prefix")," rules"),". (",(0,r.kt)("inlineCode",{parentName:"p"},"styled-components")," automatically vendor prefixes your code, so you don't need to do it manually)"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/styled-components/stylelint-config-styled-components"},(0,r.kt)("inlineCode",{parentName:"a"},"stylelint-config-styled-components"))," will automatically disable rules that cause conflicts."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"You can override rules defined in shared configs in your custom ",(0,r.kt)("inlineCode",{parentName:"p"},".stylelintrc"),".")),(0,r.kt)("h3",null,"Usage with other libraries"),(0,r.kt)("p",null,"Some other libraries also implement the ",(0,r.kt)("inlineCode",{parentName:"p"},"styled.x")," pattern with tagged template literals. This processor will lint the CSS in those tagged template literals too, as long as they use the ",(0,r.kt)("inlineCode",{parentName:"p"},"styled")," keyword."),(0,r.kt)("p",null,"If you want to use the processor with another library but you also want to change the keyword (e.g. to write ",(0,r.kt)("inlineCode",{parentName:"p"},"cool.div")," instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"styled.div"),") use the ",(0,r.kt)("inlineCode",{parentName:"p"},"moduleName")," option:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import cool from 'other-library'\n\nconst Button = cool.button`\n  color: blue;\n`\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "processors": [\n    [\n      "stylelint-processor-styled-components",\n      {\n        "moduleName": "other-library"\n      }\n    ]\n  ]\n}\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"That double array is on purpose but only necessary if you set options, see the ",(0,r.kt)("a",{parentName:"p",href:"https://stylelint.io/user-guide/configuration/#processors"},"processors configuration docs"),".")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"We only officially support ",(0,r.kt)("inlineCode",{parentName:"p"},"styled-components"),", but the hope is that other libraries can also benefit from the processor.")),(0,r.kt)("h3",null,"Interpolation tagging"),(0,r.kt)("p",null,"Sometimes ",(0,r.kt)("inlineCode",{parentName:"p"},"stylelint")," can throw an error (e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"CssSyntaxError"),") even though nothing is wrong with your CSS. This is often due to an interpolation, more specifically the fact that the processor doesn't know what you're interpolating."),(0,r.kt)("p",null,"A simplified example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const something = 'background'\n\nconst Button = styled.div`\n  ${something}: papayawhip;\n`\n")),(0,r.kt)("p",null,"When you have interpolations in your styles the processor can't know what they are, so it makes a good guess and replaces them with a syntactically equivalent placeholder value. Since ",(0,r.kt)("inlineCode",{parentName:"p"},"stylelint")," is not a code flow analysis tool this doesn't cover all edge cases and the processor will get it wrong every now and then."),(0,r.kt)("p",null,"Interpolation tagging allows you to tell the processor what an interpolation is in case it guesses wrong; it can then replace the interpolation with a syntactically correct value based on your tag."),(0,r.kt)("p",null,"For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const something = 'background'\n\nconst Button = styled.div`\n  // Tell the processor that \"something\" is a property\n  ${/* sc-prop */ something}: papayawhip;\n`\n")),(0,r.kt)("p",null,"Now the processor knows that the ",(0,r.kt)("inlineCode",{parentName:"p"},"something")," interpolation is a property, and it can replace the interpolation with a property for linting."),(0,r.kt)("p",null,"To tag an interpolation add a comment at either the start or the end of the interpolation. (",(0,r.kt)("inlineCode",{parentName:"p"},"${/* sc-tag */ foo}")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"${bar /* sc-tag */}"),") Tags start with ",(0,r.kt)("inlineCode",{parentName:"p"},"sc-")," and, if specified, a tag overrides the processors guess about what the interpolation is."),(0,r.kt)("h4",null,"Tags"),(0,r.kt)("p",null,"The full list of supported tags:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sc-block")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sc-selector")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sc-declaration")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sc-property")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sc-value"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"If you are in doubt of the vocabulary you can refer to ",(0,r.kt)("a",{parentName:"p",href:"http://apps.workflower.fi/vocabs/css/en"},"this CSS vocabulary list")," with examples.")),(0,r.kt)("p",null,"For example, when you interpolate another styled component, what you really interpolate is its unique selector. Since the processor doesn't know that, you can tell it to replace it with a selector when linting:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const Wrapper = styled.div`\n  ${/* sc-selector */ Button} {\n    color: red;\n  }\n`\n")),(0,r.kt)("p",null,"You can also use shorthand tags to avoid cluttering the code. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const Wrapper = styled.div`\n  ${/* sc-sel */ Button} {\n    color: red;\n  }\n`\n")),(0,r.kt)("h5",null,(0,r.kt)("inlineCode",{parentName:"h5"},"sc-custom")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"sc-custom")," is meant to be used as a last resort escape hatch. Prefer to use the standard tags if possible!")),(0,r.kt)("p",null,"On top of the above standard tags the processor also has the ",(0,r.kt)("inlineCode",{parentName:"p"},"sc-custom")," tag to allow you to cover more unique and uncommon edge cases. With the ",(0,r.kt)("inlineCode",{parentName:"p"},"sc-custom")," tag you can decide yourself what the placeholder value will be."),(0,r.kt)("p",null,"For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// Switch between left and right based on language settings passed through via the theme\nconst rtlSwitch = props => (props.theme.dir === 'rtl' ? 'left' : 'right')\n\nconst Button = styled.button`\n  background: green;\n  // Tell the processor to replace the interpolation with \"left\"\n  // when linting\n  margin-${/* sc-custom \"left\" */ rtlSwitch}: 12.5px;\n`\n")),(0,r.kt)("h3",null,"Syntax notes"),(0,r.kt)("h4",null,"Turning rules off from within your JS/CSS"),(0,r.kt)("p",null,"Turn off rules with ",(0,r.kt)("inlineCode",{parentName:"p"},"stylelint-disable")," comments (see the ",(0,r.kt)("a",{parentName:"p",href:"https://stylelint.io/user-guide/configuration/#turning-rules-off-from-within-your-css"},"stylelint documentation")," for all allowed syntax) both inside and outside of the tagged template literals."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import React from 'react'\nimport styled from 'styled-components'\n\n// Disable stylelint from within the tagged template literal\nconst Wrapper = styled.div`\n  /* stylelint-disable */\n  background-color: 123;\n`\n\n// Or from the JavaScript around the tagged template literal\n/* stylelint-disable */\nconst Wrapper = styled.div`\n  background-color: 123;\n`\n")),(0,r.kt)("h4",null,"Template literal style and indentation"),(0,r.kt)("p",null,'In order to have stylelint correctly apply indentation rules the processor needs to do a bit of opinionated preprocessing on the styles, which results in us only officially supporting one indentation style. (the supported style is the "default" one as shown in all the documentation)'),(0,r.kt)("p",null,"The important thing is that you put the closing backtick on the base level of indentation as follows:"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Right")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"if (condition) {\n  const Button = styled.button`\n    color: red;\n  `\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Wrong")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"if (condition) {\n  const Button = styled.button`\n    color: red;\n`\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"if (condition) {\n  const Button = styled.button`\n    color: red;`\n}\n")),(0,r.kt)("p",null,"It may be that other tagged template literal styles are coincidentally supported, but no issues will be handled regarding indentation unless the above style was used."))}C.isMDXComponent=!0;var x=n(2777),T=n(2262),S=n(748),j=n(5959),Z=n(3553),M=n(7247),B=n(9499),P=n(186),I=n(8634),z=n.n(I),A=n(5893);function R(e){var t=function(){if("undefined"===typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"===typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,o=(0,M.Z)(e);if(t){var a=(0,M.Z)(this).constructor;n=Reflect.construct(o,arguments,a)}else n=o.apply(this,arguments);return(0,Z.Z)(this,n)}}var E=z()("size",{normal:"0.9em",large:"1.1em"}),_=z()("mode",{light:"aliceblue",dark:"#222"}),q=z()("mode",{light:"rgb(46, 68, 78)",dark:"#C5C8C6"}),L=P.ZP.div.withConfig({displayName:"styled-theming-example__Box",componentId:"sc-rgdpzx-0"})(["padding:4em 2em;text-align:center;font-size:",";background-color:",";color:",";"],E,_,q),D=z().variants("mode","kind",{default:{light:"slategray",dark:"slategray"},primary:{light:"palevioletred",dark:"hotpink"},success:{light:"mediumseagreen",dark:"seagreen"},warning:{light:"sandybrown",dark:"peru"},danger:{light:"tomato",dark:"brown"}}),F=z()("size",{normal:"0.5em 1em",large:"0.4em 0.7em"}),V=z()("size",{normal:"0.5em",large:"0.2em 0.2em"}),H=P.ZP.button.withConfig({displayName:"styled-theming-example__Button",componentId:"sc-rgdpzx-1"})(["font:inherit;border:none;border-radius:0.25em;cursor:pointer;padding:",";margin:",";background-color:",";color:white;"],F,V,D);H.defaultProps={kind:"default"};var O=function(e){(0,j.Z)(n,e);var t=R(n);function n(){var e;(0,x.Z)(this,n);for(var o=arguments.length,a=new Array(o),l=0;l<o;l++)a[l]=arguments[l];return e=t.call.apply(t,[this].concat(a)),(0,B.Z)((0,S.Z)(e),"state",{mode:"light",size:"normal"}),(0,B.Z)((0,S.Z)(e),"handleToggleMode",(function(){e.setState({mode:"light"===e.state.mode?"dark":"light"})})),(0,B.Z)((0,S.Z)(e),"handleToggleSize",(function(){e.setState({size:"normal"===e.state.size?"large":"normal"})})),e}return(0,T.Z)(n,[{key:"render",value:function(){return(0,A.jsx)(P.f6,{theme:{mode:this.state.mode,size:this.state.size},children:(0,A.jsxs)(L,{children:[(0,A.jsx)(H,{onClick:this.handleToggleMode,children:"Toggle Mode"}),(0,A.jsx)(H,{kind:"primary",onClick:this.handleToggleSize,children:"Toggle Size"}),(0,A.jsx)(H,{kind:"success",onClick:this.handleToggleMode,children:"Toggle Mode"}),(0,A.jsx)(H,{kind:"warning",onClick:this.handleToggleSize,children:"Toggle Size"}),(0,A.jsx)(H,{kind:"danger",onClick:this.handleToggleMode,children:"Toggle Mode"})]})})}}]),n}(l.Component),W=O,J=["components"],X={};function Y(e){var t=e.components,n=(0,a.Z)(e,J);return(0,r.kt)("wrapper",(0,o.Z)({},X,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",null,"Styled Theming"),(0,r.kt)("p",null,"Create themes for your styled components using\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/styled-components/styled-theming"},"styled-theming")),(0,r.kt)(W,{mdxType:"StyledThemingExample"}),(0,r.kt)("p",null,"Read the ",(0,r.kt)("a",{parentName:"p",href:"http://thejameskyle.com/styled-theming.html"},"introductory blog post")),(0,r.kt)("h3",null,"Install"),(0,r.kt)("p",null,"Install the babel-plugin first:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"npm install --save styled-theming\n")),(0,r.kt)("h3",null,"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport styled, { ThemeProvider } from 'styled-components'\nimport theme from 'styled-theming'\n\nconst boxBackgroundColor = theme('mode', {\n  light: '#fff',\n  dark: '#000',\n})\n\nconst Box = styled.div`\n  background-color: ${boxBackgroundColor};\n`\n\nexport default function App() {\n  return (\n    <ThemeProvider theme={{ mode: 'light' }}>\n      <Box>Hello World</Box>\n    </ThemeProvider>\n  )\n}\n")),(0,r.kt)("h3",null,"API"),(0,r.kt)("h4",null,(0,r.kt)("inlineCode",{parentName:"h4"},"<ThemeProvider>")),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"https://www.styled-components.com/docs/advanced#theming"},"styled-components docs")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<ThemeProvider>")," is part of styled-components, but is required for\nstyled-theming."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { ThemeProvider } from 'styled-components'\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<ThemeProvider>")," accepts a single prop ",(0,r.kt)("inlineCode",{parentName:"p"},"theme")," which you should pass an\nobject with either strings or getter functions. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<ThemeProvider theme={{ mode: "dark", size: "large" }}>\n<ThemeProvider theme={{ mode: modes => modes.dark, size: sizes => sizes.large }}>\n')),(0,r.kt)("p",null,"You should generally set up a ",(0,r.kt)("inlineCode",{parentName:"p"},"<ThemeProvider>")," at the root of your app:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"function App() {\n  return (\n    <ThemeProvider theme={...}>\n      {/* rest of your app */}\n    </ThemeProvider>\n  );\n}\n")),(0,r.kt)("h4",null,(0,r.kt)("inlineCode",{parentName:"h4"},"theme(name, values)")),(0,r.kt)("p",null,"Most of your theming will be done with this function."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"name")," should match one of the keys in your ",(0,r.kt)("inlineCode",{parentName:"p"},"<ThemeProvider>")," theme."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},";<ThemeProvider theme={{ whatever: '...' }} />\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'theme("whatever", {...});\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"values")," should be an object where one of the keys will be selected by the\nvalue provided to ",(0,r.kt)("inlineCode",{parentName:"p"},"<ThemeProvider>")," theme."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<ThemeProvider theme={{ mode: "light" }} />\n<ThemeProvider theme={{ mode: "dark" }} />\n\ntheme("mode", {\n  light: "...",\n  dark: "...",\n});\n')),(0,r.kt)("p",null,"The values of this object can be any CSS value."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'theme("mode", {\n  light: "#fff",\n  dark: "#000",\n});\n\ntheme("font", {\n  sansSerif: \'"Helvetica Neue", Helvetica, Arial, sans-serif\',\n  serif: \'Georgia, Times, "Times New Roman", serif\',\n  monoSpaced: "Consolas, monaco, monospace",\n});\n')),(0,r.kt)("p",null,"These values can also be functions that return CSS values."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"theme('mode', {\n  light: props => props.theme.userProfileAccentColor.light,\n  dark: props => props.theme.userProfileAccentColor.dark,\n})\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"theme")," will create a function that you can use as a value in\nstyled-component's ",(0,r.kt)("inlineCode",{parentName:"p"},"styled")," function."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import styled from 'styled-components'\nimport theme from 'styled-theming'\n\nconst backgroundColor = theme('mode', {\n  light: '#fff',\n  dark: '#000',\n})\n\nconst Box = styled.div`\n  background-color: ${backgroundColor};\n`\n")),(0,r.kt)("h4",null,(0,r.kt)("inlineCode",{parentName:"h4"},"theme.variants(name, prop, themes)")),(0,r.kt)("p",null,"It's often useful to create variants of the same component that are selected\nvia an additional prop."),(0,r.kt)("p",null,"To make this easier with theming, styled-theming provides a\n",(0,r.kt)("inlineCode",{parentName:"p"},"theme.variants")," function."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'import styled from "styled-components";\nimport theme from "styled-theming";\n\nconst backgroundColor = theme.variants("mode", "variant", {\n  default: { light: "gray", dark: "darkgray" },\n  primary: { light: "blue", dark: "darkblue" },\n  success: { light: "green", dark: "darkgreen" },\n  warning: { light: "orange", dark: "darkorange" },\n});\n\nconst Button = styled.button`\n  background-color: ${backgroundColor};\n`;\n\nButton.propTypes = {\n  variant: PropTypes.oneOf(["default", "primary", "success", "warning"])\n};\n\nButton.defaultProps = {\n  variant: "default",\n};\n\n<Button />\n<Button variant="primary" />\n<Button variant="success" />\n<Button variant="warning" />\n')))}Y.isMDXComponent=!0;var $=["components"],G={};function U(e){var t=e.components,n=(0,a.Z)(e,$);return(0,r.kt)("wrapper",(0,o.Z)({},G,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",null,"Syntax Highlighting"),(0,r.kt)("p",null,"The one thing you used to lose when writing CSS in template literals is syntax highlighting. We're working hard on making proper syntax highlighting happening in all editors. We currently have support for Atom, Visual Studio Code, WebStorm, and soon Sublime Text."),(0,r.kt)("p",null,"This is what it looks like when properly highlighted:"),(0,r.kt)("img",{alt:"Syntax highlighted styled component",src:"/syntax-highlight-example.jpg",height:"250px"}),(0,r.kt)("h3",null,"Atom"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/gandm"},(0,r.kt)("strong",{parentName:"a"},"@gandm")),", the creator of ",(0,r.kt)("inlineCode",{parentName:"p"},"language-babel"),", has added support for ",(0,r.kt)("inlineCode",{parentName:"p"},"styled-components")," in Atom!"),(0,r.kt)("p",null,"To get proper syntax highlighting, all you have to do is install and use the ",(0,r.kt)("inlineCode",{parentName:"p"},"language-babel")," package for your JavaScript files!"),(0,r.kt)("h3",null,"Sublime Text"),(0,r.kt)("p",null,"A ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/babel/babel-sublime/pull/289"},"PR")," by ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/garetmckinley"},"@garetmckinley")," has been merged into ",(0,r.kt)("inlineCode",{parentName:"p"},"babel-sublime")," but has not been released to Package Control. It is, however, available to install directly from GitHub as described in ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/babel/babel-sublime/issues/333"},"this issue"),"."),(0,r.kt)("p",null,"Another option is ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/borela/naomi"},"Naomi")," by ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/borela"},"Alexandre Borela"),", a collection of syntax highlighting definitions for Sublime Text 3 which supports ",(0,r.kt)("inlineCode",{parentName:"p"},"styled-components")," out-of-the-box."),(0,r.kt)("h3",null,"Visual Studio Code"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/gandm"},(0,r.kt)("strong",{parentName:"a"},"@gandm")),"'s language-babel has been ported to VSCode under the name ",(0,r.kt)("a",{parentName:"p",href:"https://marketplace.visualstudio.com/items?itemName=mgmcdermott.vscode-language-babel"},"Babel JavaScript")," by ",(0,r.kt)("a",{parentName:"p",href:"https://twitter.com/michaelgmcd"},"Michael McDermott"),". It provides the same all-in-one solution for Babel syntax highlighting with styled-components included."),(0,r.kt)("p",null,"If you would like to keep your current JavaScript syntax highlighting, you can use the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/styled-components/vscode-styled-components"},"vscode-styled-components")," extension to provide styled-components syntax highlighting inside your Javascript files. You can install it as usual from the ",(0,r.kt)("a",{parentName:"p",href:"https://marketplace.visualstudio.com/items?itemName=jpoissonnier.vscode-styled-components"},"Marketplace"),"."),(0,r.kt)("h3",null,"VIM / NeoVim"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/fleischie/vim-styled-components"},(0,r.kt)("inlineCode",{parentName:"a"},"vim-styled-components"))," plugin gives you syntax highlighting inside your Javascript files. Install it with your usual plugin manager like ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/junegunn/vim-plug"},"Plug"),", ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/VundleVim/Vundle.vim"},"Vundle"),", ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/tpope/vim-pathogen"},"Pathogen"),", etc."),(0,r.kt)("p",null,"Also if you're looking for an awesome javascript syntax package you can never go wrong with ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/othree/yajs.vim"},"YAJS.vim"),"."),(0,r.kt)("h3",null,"WebStorm, IntelliJ IDEA, PhpStorm, PyCharm, and RubyMine"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/styled-components/webstorm-styled-components"},(0,r.kt)("inlineCode",{parentName:"a"},"webstorm-styled-components"))," plugin adds code completion and highlighting for CSS properties and values in the template strings. And it also provides code completion and navigation for JavaScript symbols in the interpolations. You can install it from the IDE: go to ",(0,r.kt)("inlineCode",{parentName:"p"},"Preferences | Plugins")," and search for ",(0,r.kt)("inlineCode",{parentName:"p"},"Styled Components"),"."),(0,r.kt)("h3",null,"Other Editors"),(0,r.kt)("p",null,"We could use your help to get syntax highlighting support to other editors! All these syntax highlighting were built by the Styled Components community so if you want to start working on syntax highlighting for your editor, we would love to see it."))}U.isMDXComponent=!0;var K=["components"],Q={},ee=function(e){var t=e.children;return(0,r.kt)(i.Z,{title:"Tooling",description:"Additional Tools for styled-components, babel and TypeScript plugins, testing"},t)};function te(e){var t=e.components,n=(0,a.Z)(e,K);return(0,r.kt)(ee,(0,o.Z)({},Q,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(m,{mdxType:"BabelPlugin"}),(0,r.kt)(h,{mdxType:"BabelMacro"}),(0,r.kt)(f,{mdxType:"TypeScriptPlugin"}),(0,r.kt)(N,{mdxType:"Jest"}),(0,r.kt)(C,{mdxType:"Stylelint"}),(0,r.kt)(Y,{mdxType:"StyledTheming"}),(0,r.kt)(U,{mdxType:"SyntaxHighlighting"}),(0,r.kt)(s.Z,{href:"/docs/faqs",title:"FAQs",mdxType:"NextPage"}))}te.isMDXComponent=!0},1847:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/tooling",function(){return n(9257)}])},1163:function(e,t,n){e.exports=n(9898)},8634:function(e){"use strict";function t(e,t,n){var o,a=t.theme&&t.theme[e];return"function"===typeof(o="function"===typeof a?a(n):n[a])?o(t):o}function n(e,n){return function(o){return t(e,o,n)}}n.variants=function(e,n,o){return function(a){var l=a[n]&&o[a[n]];return l&&t(e,a,l)}},e.exports=n},6864:function(e,t,n){"use strict";function o(){return o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},o.apply(this,arguments)}n.d(t,{Z:function(){return o}})}},function(e){e.O(0,[791,774,888,179],(function(){return t=1847,e(e.s=t);var t}));var t=e.O();_N_E=t}]);
//# sourceMappingURL=tooling-21cee349fd19bda4.js.map