(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[259],{4498:function(e,t,n){"use strict";n.d(t,{E:function(){return l}});var o=n(7462),a=n(7294),r=n(6591),l=a.forwardRef((function(e,t){return a.createElement(r.r,(0,o.Z)({iconAttrs:{fill:"currentColor",xmlns:"http://www.w3.org/2000/svg"},iconVerticalAlign:"middle",iconViewBox:"0 0 496 512"},e,{ref:t}),a.createElement("path",{fill:"currentColor",d:"M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3.3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5.3-6.2 2.3zm44.2-1.7c-2.9.7-4.9 2.6-4.6 4.9.3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3.7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3.3 2.9 2.3 3.9 1.6 1 3.6.7 4.3-.7.7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3.7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3.7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z"}))}));l.displayName="Github"},927:function(e,t,n){"use strict";n.d(t,{H:function(){return l}});var o=n(7462),a=n(7294),r=n(6591),l=a.forwardRef((function(e,t){return a.createElement(r.r,(0,o.Z)({iconAttrs:{fill:"currentColor",xmlns:"http://www.w3.org/2000/svg"},iconVerticalAlign:"middle",iconViewBox:"0 0 512 512"},e,{ref:t}),a.createElement("path",{fill:"currentColor",d:"M71.5 142.3c.6-5.9-1.7-11.8-6.1-15.8L20.3 72.1V64h140.2l108.4 237.7L364.2 64h133.7v8.1l-38.6 37c-3.3 2.5-5 6.7-4.3 10.8v272c-.7 4.1 1 8.3 4.3 10.8l37.7 37v8.1H307.3v-8.1l39.1-37.9c3.8-3.8 3.8-5 3.8-10.8V171.2L241.5 447.1h-14.7L100.4 171.2v184.9c-1.1 7.8 1.5 15.6 7 21.2l50.8 61.6v8.1h-144v-8L65 377.3c5.4-5.6 7.9-13.5 6.5-21.2V142.3z"}))}));l.displayName="MediumM"},8410:function(e,t,n){"use strict";n.d(t,{x:function(){return l}});var o=n(7462),a=n(7294),r=n(6591),l=a.forwardRef((function(e,t){return a.createElement(r.r,(0,o.Z)({iconAttrs:{fill:"currentColor",xmlns:"http://www.w3.org/2000/svg"},iconVerticalAlign:"middle",iconViewBox:"0 0 24 24"},e,{ref:t}),a.createElement("path",{fill:"none",d:"M0 0h24v24H0z"}),a.createElement("path",{d:"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"}))}));l.displayName="Close"},2524:function(e,t,n){"use strict";n.d(t,{W:function(){return l}});var o=n(7462),a=n(7294),r=n(6591),l=a.forwardRef((function(e,t){return a.createElement(r.r,(0,o.Z)({iconAttrs:{fill:"currentColor",xmlns:"http://www.w3.org/2000/svg"},iconVerticalAlign:"middle",iconViewBox:"0 0 24 24"},e,{ref:t}),a.createElement("path",{fill:"none",d:"M0 0h24v24H0V0z"}),a.createElement("path",{d:"M7.41 8.59L12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z"}))}));l.displayName="KeyboardArrowDown"},5595:function(e,t,n){"use strict";n.d(t,{o:function(){return l}});var o=n(7462),a=n(7294),r=n(6591),l=a.forwardRef((function(e,t){return a.createElement(r.r,(0,o.Z)({iconAttrs:{fill:"currentColor",xmlns:"http://www.w3.org/2000/svg"},iconVerticalAlign:"middle",iconViewBox:"0 0 24 24"},e,{ref:t}),a.createElement("path",{fill:"none",d:"M0 0h24v24H0z"}),a.createElement("path",{d:"M15.5 14h-.79l-.28-.27A6.471 6.471 0 0016 9.5 6.5 6.5 0 109.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"}))}));l.displayName="Search"},710:function(e,t,n){"use strict";var o=n(2777),a=n(2262),r=n(748),l=n(5959),p=n(3553),s=n(7247),i=n(9499),d=n(7294),m=n(4505),c=n(8461),u=n(6390),h=n(5893);function y(e){var t=function(){if("undefined"===typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"===typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,o=(0,s.Z)(e);if(t){var a=(0,s.Z)(this).constructor;n=Reflect.construct(o,arguments,a)}else n=o.apply(this,arguments);return(0,p.Z)(this,n)}}var k=function(e){(0,l.Z)(n,e);var t=y(n);function n(){var e;(0,o.Z)(this,n);for(var a=arguments.length,l=new Array(a),p=0;p<a;p++)l[p]=arguments[p];return e=t.call.apply(t,[this].concat(l)),(0,i.Z)((0,r.Z)(e),"state",{isSideFolded:!0,isMobileNavFolded:!0}),(0,i.Z)((0,r.Z)(e),"onSideToggle",(function(){e.setState({isSideFolded:!e.state.isSideFolded,isMobileNavFolded:!0})})),(0,i.Z)((0,r.Z)(e),"onMobileNavToggle",(function(){e.setState({isMobileNavFolded:!e.state.isMobileNavFolded,isSideFolded:!0})})),(0,i.Z)((0,r.Z)(e),"onRouteChange",(function(){e.setState({isSideFolded:!0,isMobileNavFolded:!0})})),e}return(0,a.Z)(n,[{key:"render",value:function(){var e=this.props,t=e.children,n=e.title,o=e.description,a=e.useDocsSidebarMenu,r=void 0===a||a,l=e.pages,p=this.state,s=p.isSideFolded,i=p.isMobileNavFolded;return(0,h.jsxs)(u.W2,{children:[(0,h.jsx)(m.Z,{title:"styled-components".concat(n?": ".concat(n):""),description:o,children:(0,h.jsx)("meta",{name:"robots",content:"noodp"})}),(0,h.jsx)(c.Z,{useDocsSidebarMenu:r,isSideFolded:s,isMobileNavFolded:i,pages:l,onSideToggle:this.onSideToggle,onMobileNavToggle:this.onMobileNavToggle,onRouteChange:this.onRouteChange}),(0,h.jsxs)(u.VY,{moveRight:!s,"data-e2e-id":"content",children:[(0,h.jsx)(u.Dx,{children:n}),t]})]})}}]),n}(d.Component);(0,i.Z)(k,"defaultProps",{title:"",description:""}),t.Z=k},8916:function(e,t,n){"use strict";n.d(t,{Z:function(){return g}});var o=n(186),a=n(7462),r=n(7294),l=n(6591),p=r.forwardRef((function(e,t){return r.createElement(l.r,(0,a.Z)({iconAttrs:{fill:"currentColor",xmlns:"http://www.w3.org/2000/svg"},iconVerticalAlign:"middle",iconViewBox:"0 0 24 24"},e,{ref:t}),r.createElement("path",{fill:"none",d:"M0 0h24v24H0V0z"}),r.createElement("path",{d:"M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z"}))}));p.displayName="KeyboardArrowRight";var s=n(6549),i=n(2250),d=n(5184),m=n(3401),c=n(688),u=n(5893),h=(0,o.ZP)(i.ZP).attrs((function(){return{unstyled:!0}})).withConfig({displayName:"NextPage__Wrapper",componentId:"sc-xdq90t-0"})(["display:flex;flex-direction:row;align-items:stretch;justify-content:flex-end;width:100%;padding:"," ",";text-align:right;font-family:",";",";"],(0,s.Z)(40),(0,s.Z)(20),c.Cc,(0,m.a)((0,o.iv)(["text-align:left;justify-content:center;padding:"," ",";"],(0,s.Z)(30),(0,s.Z)(20)))),y=o.ZP.h3.withConfig({displayName:"NextPage__Text",componentId:"sc-xdq90t-1"})(["font-weight:normal;padding-right:",";margin:0;"],(0,s.Z)(20)),k=o.ZP.h2.withConfig({displayName:"NextPage__PageName",componentId:"sc-xdq90t-2"})(["font-weight:600;padding-right:",";margin:0;"],(0,s.Z)(20)),f=(0,o.ZP)(p).withConfig({displayName:"NextPage__Icon",componentId:"sc-xdq90t-3"})(["color:",";width:",";"],d.BA,(0,s.Z)(30)),g=function(e){var t=e.title,n=e.href;return(0,u.jsxs)(h,{unstyled:!0,href:n,children:[(0,u.jsxs)("div",{children:[(0,u.jsx)(y,{children:"Continue on the next page"}),(0,u.jsx)(k,{children:t})]}),(0,u.jsx)("div",{children:(0,u.jsx)(f,{})})]})}},2341:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return Ge}});var o=n(6864),a=n(4730),r=(n(7294),n(3905)),l=n(710),p=n(8916),s=n(6885),i=n(186),d=n(6549),m=n(5184),c=n(688),u=n(5893),h=i.ZP.table.withConfig({displayName:"Table__TableWrapper",componentId:"sc-jhfhvg-0"})(["width:100%;text-align:left;margin:"," 0;"],(0,d.Z)(40)),y=i.ZP.thead.withConfig({displayName:"Table__TableHead",componentId:"sc-jhfhvg-1"})(["border-bottom:2px solid ",";font-family:",";"],m.CA,c.Cc),k=i.ZP.tr.withConfig({displayName:"Table__Row",componentId:"sc-jhfhvg-2"})(["padding:0 ",";padding-left:0;&:not(:last-child){border-bottom:1px solid ",";}"],(0,d.Z)(20),m.CA),f=i.ZP.th.withConfig({displayName:"Table__Column",componentId:"sc-jhfhvg-3"})(["font-weight:normal;padding:"," ",";padding-left:0;"],(0,d.Z)(10),(0,d.Z)(12)),g=(0,i.ZP)(f).withConfig({displayName:"Table__TableHeadColumn",componentId:"sc-jhfhvg-4"})(["text-transform:uppercase;font-size:85%;opacity:0.8;"]),w=function(e){var t=e.head,n=e.children;return(0,u.jsxs)(h,{children:[(0,u.jsx)(y,{children:(0,u.jsx)("tr",{children:t.map((function(e,t){return(0,u.jsx)(g,{title:e,children:e},t)}))})}),(0,u.jsx)("tbody",{children:n})]})},C=["components"],b={};function x(e){var t=e.components,n=(0,a.Z)(e,C);return(0,r.kt)("wrapper",(0,o.Z)({},b,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h3",null,(0,r.kt)("inlineCode",{parentName:"h3"},"styled")),(0,r.kt)("p",null,"This is the default export.\nThis is a low-level factory we use to create the ",(0,r.kt)("inlineCode",{parentName:"p"},"styled.tagname")," helper methods."),(0,r.kt)(w,{head:["Arguments","Description"],mdxType:"Table"},(0,r.kt)(k,{mdxType:"Row"},(0,r.kt)(f,{mdxType:"Column"},"1. ",(0,r.kt)(s.Z,{mdxType:"Code"},"component")," / ",(0,r.kt)(s.Z,{mdxType:"Code"},"tagname")),(0,r.kt)(f,{mdxType:"Column"},"Either a valid react component or a tagname like ",(0,r.kt)(s.Z,{mdxType:"Code"},"'div'"),"."))),(0,r.kt)("p",null,"Returns a function that accepts a tagged template literal and turns it into a ",(0,r.kt)("inlineCode",{parentName:"p"},"StyledComponent"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-react"},"// import styled from 'styled-components'\n\nconst Button = styled.button`\n  background: palevioletred;\n  border-radius: 3px;\n  border: none;\n  color: white;\n`\n\nconst TomatoButton = styled(Button)`\n  background: tomato;\n`\n\nrender(\n  <>\n    <Button>I'm purple.</Button>\n    <br />\n    <TomatoButton>I'm red.</TomatoButton>\n  </>\n)\n")),(0,r.kt)("p",null,"You can see this method being introduced in the ",(0,r.kt)("a",{parentName:"p",href:"/docs/basics#getting-started"},"Getting started")," section."))}x.isMDXComponent=!0;var T=["components"],v={};function N(e){var t=e.components,n=(0,a.Z)(e,T);return(0,r.kt)("wrapper",(0,o.Z)({},v,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h3",null,(0,r.kt)("inlineCode",{parentName:"h3"},"TaggedTemplateLiteral")),(0,r.kt)("p",null,"This is what you pass into your styled calls \u2013 a tagged template literal.\nThis is an ES6 language feature. You can learn more about them in the\n",(0,r.kt)("a",{parentName:"p",href:"/docs/advanced#tagged-template-literals"},"Tagged Template Literals")," section."),(0,r.kt)(w,{head:["Inputs","Description"],mdxType:"Table"},(0,r.kt)(k,{mdxType:"Row"},(0,r.kt)(f,{mdxType:"Column"},(0,r.kt)(s.Z,{mdxType:"Code"},"Rule")),(0,r.kt)(f,{mdxType:"Column"},"Any CSS rules (string)")),(0,r.kt)(k,{mdxType:"Row"},(0,r.kt)(f,{mdxType:"Column"},(0,r.kt)(s.Z,{mdxType:"Code"},"Interpolation")),(0,r.kt)(f,{mdxType:"Column"},"This can either be a string or a function. Strings are combined with the rules as-is. Functions will receive the styled component's props as the first and only argument."))),(0,r.kt)("p",null,"Read more about how to adapt styling based on props in the\n",(0,r.kt)("a",{parentName:"p",href:"/docs/basics#adapting-based-on-props"},"Adapting based on props")," section."),(0,r.kt)("p",null,"The properties that are passed into an interpolated function get attached a special\nproperty, ",(0,r.kt)("inlineCode",{parentName:"p"},"theme"),", which is injected by a higher level ",(0,r.kt)("inlineCode",{parentName:"p"},"ThemeProvider")," component.\nCheck the section on ",(0,r.kt)("a",{parentName:"p",href:"/docs/advanced#theming"},"Theming")," for more information on this."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-react"},"// import styled from 'styled-components'\n\nconst padding = '3em'\n\nconst Section = styled.section`\n  color: white;\n\n  /* Pass variables as inputs */\n  padding: ${padding};\n\n  /* Adjust the background from the properties */\n  background: ${props => props.background};\n`\n\nrender(\n  <Section background=\"cornflowerblue\">\n    \u2728 Magic\n  </Section>\n)\n")),(0,r.kt)("p",null,"You can also return objects from interpolations or input objects directly, and they'll be\ntreated as inline styles. However this is highly discouraged, as the CSS syntax has support\nfor pseudo selectors, media queries, nesting, etc., which the object syntax doesn't."))}N.isMDXComponent=!0;var S=["components"],M={};function Z(e){var t=e.components,n=(0,a.Z)(e,S);return(0,r.kt)("wrapper",(0,o.Z)({},M,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h3",null,(0,r.kt)("inlineCode",{parentName:"h3"},"StyledComponent")),(0,r.kt)("p",null,"A styled React component. This is returned when you\ncall ",(0,r.kt)("inlineCode",{parentName:"p"},"styled.tagname")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"styled(Component)")," with styles."),(0,r.kt)("p",null,"This component can take any prop. It passes it on to the HTML node if it's a valid attribute,\notherwise it only passes it into interpolated functions. (see ",(0,r.kt)("a",{parentName:"p",href:"/docs/advanced#tagged-template-literals"},"Tagged Template Literal"),")"),(0,r.kt)("p",null,"You can pass an arbitrary classname to a styled component without problem and it will be applied\nnext to the styles defined by the styled call.\n(e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},'<MyStyledComp className="bootstrap__btn" />'),")"),(0,r.kt)("h4",null,".attrs"),(0,r.kt)("p",null,"This is a chainable method that attaches some props to a styled component.\nThe first and only argument is an object that will be merged into the rest of the\ncomponent's props. The ",(0,r.kt)("inlineCode",{parentName:"p"},"attrs")," object accepts the following values:"),(0,r.kt)(w,{head:["Values","Description"],mdxType:"Table"},(0,r.kt)(k,{mdxType:"Row"},(0,r.kt)(f,{mdxType:"Column"},(0,r.kt)(s.Z,{mdxType:"Code"},"Prop Value")),(0,r.kt)(f,{mdxType:"Column"},"These can be of any type, except functions. They'll stay static and will be merged into the existing component props.")),(0,r.kt)(k,{mdxType:"Row"},(0,r.kt)(f,{mdxType:"Column"},(0,r.kt)(s.Z,{mdxType:"Code"},"Prop Factory")),(0,r.kt)(f,{mdxType:"Column"},"A function that receives the props that are passed into the component and computes a value, that is then going to be merged into the existing component props."))),(0,r.kt)("p",null,"Returns another ",(0,r.kt)("inlineCode",{parentName:"p"},"StyledComponent"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-react"},'// import styled from \'styled-components\'\n\nconst Input = styled.input.attrs(props => ({\n  type: \'text\',\n  size: props.small ? 5 : undefined,\n}))`\n  border-radius: 3px;\n  border: 1px solid palevioletred;\n  display: block;\n  margin: 0 0 1em;\n  padding: ${props => props.padding};\n\n  ::placeholder {\n    color: palevioletred;\n  }\n`\n\nrender(\n  <>\n    <Input small placeholder="Small" />\n    <Input placeholder="Normal" />\n    <Input padding="2em" placeholder="Padded" />\n  </>\n)\n')),(0,r.kt)("p",null,"Learn more about this constructor in the ",(0,r.kt)("a",{parentName:"p",href:"/docs/basics#attaching-additional-props"},"Attaching Additional Props")," section."),(0,r.kt)("h4",null,".withComponent"),(0,r.kt)("p",null,"This is a method that creates a new ",(0,r.kt)("inlineCode",{parentName:"p"},"StyledComponent")," with a different tag or component\napplied to it, but all the same rules of the one it's called on."),(0,r.kt)(w,{head:["Arguments","Description"],mdxType:"Table"},(0,r.kt)(k,{mdxType:"Row"},(0,r.kt)(f,{mdxType:"Column"},"1. ",(0,r.kt)(s.Z,{mdxType:"Code"},"component")," / ",(0,r.kt)(s.Z,{mdxType:"Code"},"tagname")),(0,r.kt)(f,{mdxType:"Column"},"Either a valid react component or a tagname like `'div'`."))),(0,r.kt)("p",null,"Returns a new ",(0,r.kt)("inlineCode",{parentName:"p"},"StyledComponent")," with the new tag / component being applied when it's used."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"As of styled-components v4 the ",(0,r.kt)("inlineCode",{parentName:"p"},"withComponent")," API is now a candidate for deprecation. In all likelihood, you probably want to use the new ",(0,r.kt)("a",{parentName:"p",href:"#as-polymorphic-prop"},(0,r.kt)("inlineCode",{parentName:"a"},'"as"')," prop")," to simply switch what element/component being rendered since the ",(0,r.kt)("inlineCode",{parentName:"p"},"withComponent")," API is destructive toward styles if the lowest-wrapped component is a ",(0,r.kt)("inlineCode",{parentName:"p"},"StyledComponent"),".")),(0,r.kt)("h4",null,(0,r.kt)("inlineCode",{parentName:"h4"},'"as"')," polymorphic prop | v4"),(0,r.kt)("p",null,"If you want to keep all the styling you've applied to a component but just switch out what's being ultimately rendered (be it a different HTML tag or a different custom component), you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},'"as"')," prop to do this at runtime."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-react"},'// import styled from "styled-components";\n\nconst Component = styled.div`\n  color: red;\n`;\n\nrender(\n  <Component\n    as="button"\n    onClick={() => alert(\'It works!\')}\n  >\n    Hello World!\n  </Component>\n)\n')),(0,r.kt)("p",null,"This sort of thing is very useful in use cases like a navigation bar where some of the items should be links and some just buttons, but all be styled the same way."),(0,r.kt)("h4",null,'"forwardedAs" prop | v4.3'),(0,r.kt)("p",null,"If you choose to wrap another component with the ",(0,r.kt)("inlineCode",{parentName:"p"},"styled()")," HOC that also accepts an ",(0,r.kt)("inlineCode",{parentName:"p"},'"as"')," prop, use ",(0,r.kt)("inlineCode",{parentName:"p"},'"forwardedAs"')," to pass along the desired prop to the wrapped component."),(0,r.kt)("h4",null,"Transient props | v5.1"),(0,r.kt)("p",null,"If you want to prevent props meant to be consumed by styled components from being passed to the underlying React node or rendered to the DOM element, you can prefix the prop name with a dollar sign (",(0,r.kt)("inlineCode",{parentName:"p"},"$"),"), turning it into a transient prop."),(0,r.kt)("p",null,"In this example, ",(0,r.kt)("inlineCode",{parentName:"p"},"$draggable")," isn't rendered to the DOM like ",(0,r.kt)("inlineCode",{parentName:"p"},"draggable")," is."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-react"},'const Comp = styled.div`\n  color: ${props =>\n    props.$draggable || \'black\'};\n`;\n\nrender(\n  <Comp $draggable="red" draggable="true">\n    Drag me!\n  </Comp>\n);\n')),(0,r.kt)("h4",null,"shouldForwardProp | v5.1"),(0,r.kt)("p",null,"This is a more dynamic, granular filtering mechanism than transient props. It's handy in situations where multiple higher-order components are being composed together and happen to share the same prop name.",(0,r.kt)("inlineCode",{parentName:"p"},"shouldForwardProp")," works much like the predicate callback of ",(0,r.kt)("inlineCode",{parentName:"p"},"Array.filter"),". A prop that fails the test isn't passed down to underlying components, just like a transient prop."),(0,r.kt)("p",null,"Keep in mind that, as in this example, other chainable methods should always be executed after ",(0,r.kt)("inlineCode",{parentName:"p"},".withConfig"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-react"},"const Comp = styled('div').withConfig({\n  shouldForwardProp: (prop, defaultValidatorFn) =>\n      !['hidden'].includes(prop)\n      && defaultValidatorFn(prop),\n}).attrs({ className: 'foo' })`\n  color: red;\n  &.foo {\n    text-decoration: underline;\n  }\n`;\n\nrender(\n  <Comp hidden draggable=\"true\">\n    Drag Me!\n  </Comp>\n);\n")),(0,r.kt)("p",null,"Optionally, ",(0,r.kt)("inlineCode",{parentName:"p"},"shouldForwardProp")," can take a second parameter that provides access to the default validator function. This function can be used as a fallback, and of course, it also works like a predicate, filtering based on known HTML attributes."))}Z.isMDXComponent=!0;var D=["components"],P={};function R(e){var t=e.components,n=(0,a.Z)(e,D);return(0,r.kt)("wrapper",(0,o.Z)({},P,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h3",null,(0,r.kt)("inlineCode",{parentName:"h3"},"ThemeProvider")),(0,r.kt)("p",null,"A helper component for theming. Injects the theme into all styled components anywhere\nbeneath it in the component tree, via the context API.\nCheck the section on ",(0,r.kt)("a",{parentName:"p",href:"/docs/advanced#theming"},"Theming"),"."),(0,r.kt)(w,{head:["Props","Description"],mdxType:"Table"},(0,r.kt)(k,{mdxType:"Row"},(0,r.kt)(f,{mdxType:"Column"},(0,r.kt)(s.Z,{mdxType:"Code"},"theme")),(0,r.kt)(f,{mdxType:"Column"},"An object that will be injected as ",(0,r.kt)(s.Z,{mdxType:"Code"},"theme")," into all interpolations in styled components beneath the provider."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-react"},"// import styled, { ThemeProvider } from 'styled-components'\n\nconst Box = styled.div`\n  color: ${props => props.theme.color};\n`\n\nrender(\n  <ThemeProvider theme={{ color: 'mediumseagreen' }}>\n    <Box>I'm mediumseagreen!</Box>\n  </ThemeProvider>\n)\n")))}R.isMDXComponent=!0;var j=["components"],A={};function I(e){var t=e.components,n=(0,a.Z)(e,j);return(0,r.kt)("wrapper",(0,o.Z)({},A,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h3",null,(0,r.kt)("inlineCode",{parentName:"h3"},"css")," prop | v4"),(0,r.kt)("p",null,"Sometimes you don't want to create an extra component just to apply a bit of styling. The ",(0,r.kt)("inlineCode",{parentName:"p"},"css")," prop is a convenient way to iterate on your components without settling on fixed component boundaries yet. It works on both normal HTML tags as well as components, and supports everything any styled component supports, including adapting based on props, theming and custom components."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"To enable support for the ",(0,r.kt)("inlineCode",{parentName:"p"},"css")," prop you have to use the ",(0,r.kt)("a",{parentName:"p",href:"/docs/tooling#babel-plugin"},"Babel plugin"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<div\n  css={`\n    background: papayawhip;\n    color: ${props => props.theme.colors.text};\n  `}\n/>\n<Button\n  css="padding: 0.5em 1em;"\n/>\n')),(0,r.kt)("p",null,"Under the hood, the Babel plugin turns any element with a ",(0,r.kt)("inlineCode",{parentName:"p"},"css")," prop into a styled component. For example, the above code becomes:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import styled from 'styled-components';\n\nconst StyledDiv = styled.div`\n  background: papayawhip;\n  color: ${props => props.theme.colors.text};\n`\n\nconst StyledButton = styled(Button)`\n  padding: 0.5em 1em;\n`\n\n<StyledDiv />\n<StyledButton />\n")),(0,r.kt)("p",null,"Note that you don't even have to add the import, the Babel plugin does that automatically! (unless you're using the Babel macro, see below)"),(0,r.kt)("h4",null,"Usage with the Babel macro"),(0,r.kt)("p",null,"You can use the ",(0,r.kt)("a",{parentName:"p",href:"/docs/tooling#babel-macro"},"Babel macro")," to make this work in ",(0,r.kt)("inlineCode",{parentName:"p"},"create-react-app"),". Unfortunately, Babel macros only run when imported so ",(0,r.kt)("strong",{parentName:"p"},"the import can not be added automatically.")," The above code works perfectly if you add the import to the macro manually:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import styled from 'styled-components/macro'\n\n<div\n  css={`\n    background: papayawhip;\n    color: ${props => props.theme.colors.text};\n  `}\n/>\n<Button\n  css=\"padding: 0.5em 1em;\"\n/>\n")),(0,r.kt)("h4",null,"Usage with TypeScript"),(0,r.kt)("p",null,"To prevent TypeScript errors on the ",(0,r.kt)("inlineCode",{parentName:"p"},"css")," prop on arbitrary elements, install ",(0,r.kt)("inlineCode",{parentName:"p"},"@types/styled-components")," and add the following import once in your project:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import {} from 'styled-components/cssprop'\n")),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/DefinitelyTyped/DefinitelyTyped/issues/31245#issuecomment-446011384"},"https://github.com/DefinitelyTyped/DefinitelyTyped/issues/31245#issuecomment-446011384")," for more information."))}I.isMDXComponent=!0;var F=["components"],L={};function X(e){var t=e.components,n=(0,a.Z)(e,F);return(0,r.kt)("wrapper",(0,o.Z)({},L,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",null,"Primary"),(0,r.kt)(x,{mdxType:"Styled"}),(0,r.kt)(N,{mdxType:"TaggedTemplateLiteral"}),(0,r.kt)(Z,{mdxType:"StyledComponent"}),(0,r.kt)(R,{mdxType:"ThemeProvider"}),(0,r.kt)(I,{mdxType:"CssProp"}))}X.isMDXComponent=!0;var H=["components"],B={};function $(e){var t=e.components,n=(0,a.Z)(e,H);return(0,r.kt)("wrapper",(0,o.Z)({},B,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h3",null,(0,r.kt)("inlineCode",{parentName:"h3"},"css")),(0,r.kt)("p",null,"A helper function to generate CSS from a template literal with interpolations. You need to use this if you return a\ntemplate literal with functions inside an interpolation due to how tagged template literals work in JavaScript."),(0,r.kt)("p",null,"If you're interpolating a string you do not need to use this, only if you're interpolating a function."),(0,r.kt)(w,{head:["Arguments","Description"],mdxType:"Table"},(0,r.kt)(k,{mdxType:"Row"},(0,r.kt)(f,{mdxType:"Column"},"1. ",(0,r.kt)(s.Z,{mdxType:"Code"},"TaggedTemplateLiteral")),(0,r.kt)(f,{mdxType:"Column"},"A tagged template literal with your CSS and interpolations."))),(0,r.kt)("p",null,"Returns an array of interpolations, which is a flattened data structure that you can pass as an interpolation\nitself."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import styled, { css } from 'styled-components'\n\nconst complexMixin = css`\n  color: ${props => (props.whiteColor ? 'white' : 'black')};\n`\n\nconst StyledComp = styled.div`\n  /* This is an example of a nested interpolation */\n  ${props => (props.complex ? complexMixin : 'color: blue;')};\n`\n")),(0,r.kt)("p",null,"If you leave off the css your function will be ",(0,r.kt)("inlineCode",{parentName:"p"},"toString()"),"ed and you'll not get the results\nyou expected."))}$.isMDXComponent=!0;var q=["components"],_={};function E(e){var t=e.components,n=(0,a.Z)(e,q);return(0,r.kt)("wrapper",(0,o.Z)({},_,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h3",null,(0,r.kt)("inlineCode",{parentName:"h3"},"keyframes")," | web-only"),(0,r.kt)("p",null,"A helper method to create keyframes for animations."),(0,r.kt)(w,{head:["Arguments","Description"],mdxType:"Table"},(0,r.kt)(k,{mdxType:"Row"},(0,r.kt)(f,{mdxType:"Column"},"1. ",(0,r.kt)(s.Z,{mdxType:"Code"},"TaggedTemplateLiteral")),(0,r.kt)(f,{mdxType:"Column"},"A tagged template literal with your keyframes inside."))),(0,r.kt)("p",null,"Returns a Keyframes model, to be used in your animation declarations. You can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"getName()")," API on the returned model if you wish to obtain the generated animation name."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"In styled-components v3 and below, the ",(0,r.kt)("inlineCode",{parentName:"p"},"keyframes")," helper directly returned the animation name instead of an object with the ",(0,r.kt)("inlineCode",{parentName:"p"},"getName")," method.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import styled, { keyframes } from 'styled-components'\n\nconst fadeIn = keyframes`\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n`\n\nconst FadeInButton = styled.button`\n  animation: 1s ${fadeIn} ease-out;\n`\n")),(0,r.kt)("p",null,"If you are composing your style rule as a partial, make sure to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"css")," helper."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import styled, { css, keyframes } from 'styled-components'\n\nconst pulse = keyframes`\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n`\n\nconst animation = props =>\n  css`\n    ${pulse} ${props.animationLength} infinite alternate;\n  `\n\nconst PulseButton = styled.button`\n  animation: ${animation};\n`\n")),(0,r.kt)("p",null,"You can learn more about using animations with styled-components in the ",(0,r.kt)("a",{parentName:"p",href:"/docs/basics#animations"},"Animations")," section."))}E.isMDXComponent=!0;var z=["components"],O={};function V(e){var t=e.components,n=(0,a.Z)(e,z);return(0,r.kt)("wrapper",(0,o.Z)({},O,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h3",null,(0,r.kt)("inlineCode",{parentName:"h3"},"isStyledComponent")),(0,r.kt)("p",null,"A utility to help identify styled components."),(0,r.kt)(w,{head:["Arguments","Description"],mdxType:"Table"},(0,r.kt)(k,{mdxType:"Row"},(0,r.kt)(f,{mdxType:"Column"},"1. ",(0,r.kt)(s.Z,{mdxType:"Code"},"Function")),(0,r.kt)(f,{mdxType:"Column"},"Any function expected to possibly be a styled component or React component wrapped in a styled component"))),(0,r.kt)("p",null,"Returns true if the passed function is a valid styled components-wrapped component class. It can be useful for determining if a component needs to be wrapped such that it can be used as a component selector:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport styled, { isStyledComponent } from 'styled-components'\nimport MaybeStyledComponent from './somewhere-else'\n\nlet TargetedComponent = isStyledComponent(MaybeStyledComponent)\n  ? MaybeStyledComponent\n  : styled(MaybeStyledComponent)``\n\nconst ParentComponent = styled.div`\n  color: cornflowerblue;\n\n  ${TargetedComponent} {\n    color: tomato;\n  }\n`\n")))}V.isMDXComponent=!0;var G=["components"],W={};function U(e){var t=e.components,n=(0,a.Z)(e,G);return(0,r.kt)("wrapper",(0,o.Z)({},W,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h3",null,(0,r.kt)("inlineCode",{parentName:"h3"},"withTheme")),(0,r.kt)("p",null,"This is a higher order component factory to get the current theme from a ",(0,r.kt)("inlineCode",{parentName:"p"},"ThemeProvider")," and\npass it to your component as a ",(0,r.kt)("inlineCode",{parentName:"p"},"theme")," prop."),(0,r.kt)(w,{head:["Arguments","Description"],mdxType:"Table"},(0,r.kt)(k,{mdxType:"Row"},(0,r.kt)(f,{mdxType:"Column"},"1. ",(0,r.kt)(s.Z,{mdxType:"Code"},"Component")),(0,r.kt)(f,{mdxType:"Column"},"Any valid React component that can handle a ",(0,r.kt)(s.Z,{mdxType:"Code"},"theme")," prop."))),(0,r.kt)("p",null,"Returns the passed component inside a wrapper (higher order component).\nThe passed component will receive a ",(0,r.kt)("inlineCode",{parentName:"p"},"theme")," prop with the current theme object."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { withTheme } from 'styled-components'\n\nclass MyComponent extends React.Component {\n  render() {\n    console.log('Current theme: ', this.props.theme)\n    // ...\n  }\n}\n\nexport default withTheme(MyComponent)\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"All styled components ",(0,r.kt)("a",{parentName:"p",href:"/docs/advanced#theming"},"automatically receive the theme as a prop"),", so this is only necessary if you wish to access the theme for other reasons.")))}U.isMDXComponent=!0;var Y=["components"],K={};function J(e){var t=e.components,n=(0,a.Z)(e,Y);return(0,r.kt)("wrapper",(0,o.Z)({},K,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h3",null,(0,r.kt)("inlineCode",{parentName:"h3"},"createGlobalStyle")," | v4 | web-only"),(0,r.kt)("p",null,"A helper function to generate a special ",(0,r.kt)("inlineCode",{parentName:"p"},"StyledComponent")," that handles global styles. Normally, styled components are automatically scoped to a local CSS class and therefore isolated from other components. In the case of ",(0,r.kt)("inlineCode",{parentName:"p"},"createGlobalStyle"),", this limitation is removed and things like CSS resets or base stylesheets can be applied."),(0,r.kt)(w,{head:["Arguments","Description"],mdxType:"Table"},(0,r.kt)(k,{mdxType:"Row"},(0,r.kt)(f,{mdxType:"Column"},"1. ",(0,r.kt)(s.Z,{mdxType:"Code"},"TaggedTemplateLiteral")),(0,r.kt)(f,{mdxType:"Column"},"A tagged template literal with your CSS and interpolations."))),(0,r.kt)("p",null,"Returns a ",(0,r.kt)("inlineCode",{parentName:"p"},"StyledComponent"),' that does not accept children. Place it at the top of your React tree and the global styles will be injected when the component is "rendered".'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { createGlobalStyle } from 'styled-components'\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    color: ${props => (props.whiteColor ? 'white' : 'black')};\n  }\n`\n\n// later in your app\n\n<React.Fragment>\n  <GlobalStyle whiteColor />\n  <Navigation /> {/* example of other top-level stuff */}\n</React.Fragment>\n")),(0,r.kt)("p",null,"Since the ",(0,r.kt)("inlineCode",{parentName:"p"},"GlobalStyle")," component is a ",(0,r.kt)("inlineCode",{parentName:"p"},"StyledComponent"),", that means it also has access to theming from the ",(0,r.kt)("a",{parentName:"p",href:"/docs/api#themeprovider"},(0,r.kt)("inlineCode",{parentName:"a"},"<ThemeProvider>")," component")," if provided."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { createGlobalStyle, ThemeProvider } from 'styled-components'\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    color: ${props => (props.whiteColor ? 'white' : 'black')};\n    font-family: ${props => props.theme.fontFamily};\n  }\n`\n\n// later in your app\n\n<ThemeProvider theme={{ fontFamily: 'Helvetica Neue' }}>\n  <React.Fragment>\n    <Navigation /> {/* example of other top-level stuff */}\n    <GlobalStyle whiteColor />\n  </React.Fragment>\n</ThemeProvider>\n")))}J.isMDXComponent=!0;var Q=["components"],ee={};function te(e){var t=e.components,n=(0,a.Z)(e,Q);return(0,r.kt)("wrapper",(0,o.Z)({},ee,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h3",null,(0,r.kt)("inlineCode",{parentName:"h3"},"ThemeConsumer")," | v4"),(0,r.kt)("p",null,"This is the ",(0,r.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/context.html#consumer"},'"consumer" component')," created by ",(0,r.kt)("inlineCode",{parentName:"p"},"React.createContext")," as the companion component to ",(0,r.kt)("inlineCode",{parentName:"p"},"ThemeProvider"),". It uses the ",(0,r.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/render-props.html"},"render prop pattern")," to allow for dynamic access to the theme during rendering."),(0,r.kt)("p",null,"It passes the current theme (based on a ",(0,r.kt)("a",{parentName:"p",href:"/docs/api#themeprovider"},(0,r.kt)("inlineCode",{parentName:"a"},"ThemeProvider"))," higher in your component tree) as an argument to the child function. From this function, you may return further JSX or nothing."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { ThemeConsumer } from 'styled-components'\n\nexport default class MyComponent extends React.Component {\n  render() {\n    return (\n      <ThemeConsumer>\n        {theme => <div>The theme color is {theme.color}.</div>}\n      </ThemeConsumer>\n    )\n  }\n}\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"All styled components ",(0,r.kt)("a",{parentName:"p",href:"/docs/advanced#theming"},"automatically receive the theme as a prop"),", so this is only necessary if you wish to access the theme for other reasons.")))}te.isMDXComponent=!0;var ne=["components"],oe={};function ae(e){var t=e.components,n=(0,a.Z)(e,ne);return(0,r.kt)("wrapper",(0,o.Z)({},oe,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h3",null,(0,r.kt)("inlineCode",{parentName:"h3"},"StyleSheetManager")),(0,r.kt)("p",null,"A helper component for modifying how your styles are processed. For a given subtree involving styled-components, you can customize various behaviors like how the CSS runtime processor (stylis) handles styles via userland plugins and option overrides."),(0,r.kt)(w,{head:["Props","Description"],mdxType:"Table"},(0,r.kt)(k,{mdxType:"Row"},(0,r.kt)(f,{mdxType:"Column"},(0,r.kt)(s.Z,{mdxType:"Code"},"disableCSSOMInjection (v5+)")),(0,r.kt)(f,{mdxType:"Column"},"Switches to the slower text node-based CSS injection system for adding styles to the DOM. Useful for integrating with third party tools that haven't been upgraded to consume styles from the CSSOM APIs.")),(0,r.kt)(k,{mdxType:"Row"},(0,r.kt)(f,{mdxType:"Column"},(0,r.kt)(s.Z,{mdxType:"Code"},"disableVendorPrefixes (v5+)")),(0,r.kt)(f,{mdxType:"Column"},"Opts the given subtree out of adding legacy CSS properties for rendered components.")),(0,r.kt)(k,{mdxType:"Row"},(0,r.kt)(f,{mdxType:"Column"},(0,r.kt)(s.Z,{mdxType:"Code"},"sheet")),(0,r.kt)(f,{mdxType:"Column"},(0,r.kt)("em",null,"Thar be dragons ahead.")," Create and provide your own StyleSheet if necessary for advanced SSR scenarios.")),(0,r.kt)(k,{mdxType:"Row"},(0,r.kt)(f,{mdxType:"Column"},(0,r.kt)(s.Z,{mdxType:"Code"},"stylisPlugins (v5+)")),(0,r.kt)(f,{mdxType:"Column"},"An array of plugins to be run by stylis during compilation. Check out"," ",(0,r.kt)("a",{href:"https://www.npmjs.com/search?q=keywords%3Astylis",target:"_blank"},"what's available on npm"),".")),(0,r.kt)(k,{mdxType:"Row"},(0,r.kt)(f,{mdxType:"Column"},(0,r.kt)(s.Z,{mdxType:"Code"},"target")),(0,r.kt)(f,{mdxType:"Column"},(0,r.kt)("em",null,"Thar be dragons ahead.")," Provide an alternate DOM node to inject styles info."))),(0,r.kt)("p",null,"For example if your app runs only in modern browsers, you may want to disable vendor prefixing for your styles:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-react"},"// import styled, { StyleSheetManager } from 'styled-components'\n\nconst Box = styled.div`\n  color: ${props => props.theme.color};\n  display: flex;\n`\n\nrender(\n  <StyleSheetManager disableVendorPrefixes>\n    <Box>If you inspect me, there are no vendor prefixes for the flexbox style.</Box>\n  </StyleSheetManager>\n)\n")),(0,r.kt)("p",null,"Another example would be enabling right-to-left translation for your styles via the userland ",(0,r.kt)("inlineCode",{parentName:"p"},"stylis-plugin-rtl")," plugin:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-react"},"// import styled, { StyleSheetManager } from 'styled-components'\n// import stylisRTLPlugin from 'stylis-plugin-rtl';\n\nconst Box = styled.div`\n  background: mediumseagreen;\n  border-left: 10px solid red;\n`\n\nrender(\n  <StyleSheetManager stylisPlugins={[stylisRTLPlugin]}>\n    <Box>My border is now on the right!</Box>\n  </StyleSheetManager>\n)\n")))}ae.isMDXComponent=!0;var re=["components"],le={};function pe(e){var t=e.components,n=(0,a.Z)(e,re);return(0,r.kt)("wrapper",(0,o.Z)({},le,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h3",null,(0,r.kt)("inlineCode",{parentName:"h3"},"useTheme")," | v5"),(0,r.kt)("p",null,"This is a custom hook to get the current theme from a ",(0,r.kt)("inlineCode",{parentName:"p"},"ThemeProvider"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { useTheme } from 'styled-components'\n\nfunction MyComponent() {\n  const theme = useTheme()\n  console.log('Current theme: ', theme)\n\n  // ...\n}\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"All styled components ",(0,r.kt)("a",{parentName:"p",href:"/docs/advanced#theming"},"automatically receive the theme as a prop"),", so this is only necessary if you wish to access the theme for other reasons.")))}pe.isMDXComponent=!0;var se=["components"],ie={};function de(e){var t=e.components,n=(0,a.Z)(e,se);return(0,r.kt)("wrapper",(0,o.Z)({},ie,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",null,"Helpers"),(0,r.kt)(J,{mdxType:"CreateGlobalStyle"}),(0,r.kt)($,{mdxType:"CSS"}),(0,r.kt)(E,{mdxType:"Keyframes"}),(0,r.kt)(ae,{mdxType:"StyleSheetManager"}),(0,r.kt)(V,{mdxType:"IsStyledComponent"}),(0,r.kt)(U,{mdxType:"WithTheme"}),(0,r.kt)(pe,{mdxType:"UseTheme"}),(0,r.kt)(te,{mdxType:"ThemeConsumer"}))}de.isMDXComponent=!0;var me=["components"],ce={};function ue(e){var t=e.components,n=(0,a.Z)(e,me);return(0,r.kt)("wrapper",(0,o.Z)({},ce,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",null,"Supported CSS"),(0,r.kt)("p",null,"Within a styled component, we support all of CSS plus nesting. Since we generate an\nactual stylesheet and not inline styles, whatever works in CSS works in styled-components!"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-react"},"const Example = styled.div`\n  /* all declarations will be prefixed */\n  padding: 2em 1em;\n  background: papayawhip;\n\n  /* pseudo selectors work as well */\n  &:hover {\n    background: palevioletred;\n  }\n\n  /* media queries are no problem */\n  @media (max-width: 600px) {\n    background: tomato;\n\n    /* nested rules work as expected */\n    &:hover {\n      background: yellow;\n    }\n  }\n\n  > p {\n    /* descendant-selectors work as well, but are more of an escape hatch */\n    text-decoration: underline;\n  }\n\n  /* Contextual selectors work as well */\n  html.test & {\n    display: none;\n  }\n`;\n\nrender(\n  <Example>\n    <p>Hello World!</p>\n  </Example>\n);\n")),(0,r.kt)("p",null,"Ampersands (",(0,r.kt)("inlineCode",{parentName:"p"},"&"),") get replaced by our generated, unique classname for that styled\ncomponent, making it easy to have complex logic."))}ue.isMDXComponent=!0;var he=["components"],ye={};function ke(e){var t=e.components,n=(0,a.Z)(e,he);return(0,r.kt)("wrapper",(0,o.Z)({},ye,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",null,"Flow"),(0,r.kt)("p",null,"styled-components has first-class ",(0,r.kt)("a",{parentName:"p",href:"https://flowtype.org"},"Flow")," support to help\nyou find typing errors while using our public API."),(0,r.kt)("p",null,"To use Flow with the public api of styled-components we recommend that you use the library definition in ",(0,r.kt)("inlineCode",{parentName:"p"},"flow-typed"),".\nTo install it you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"flow-typed")," cli or download it manually from the git repository and store it in\na ",(0,r.kt)("inlineCode",{parentName:"p"},"flow-typed/")," folder in the same directory with your ",(0,r.kt)("inlineCode",{parentName:"p"},"flowconfig"),"."),(0,r.kt)("h3",null,"Installing the definitions"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"npm i -g flow-typed # if you do not already have flow-typed\nflow-typed install styled-components@<version>\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"If you are on npm >= 5.2 you could simply use ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/zkat/npx"},"npx"))),(0,r.kt)("h3",null,"Ignore styled-components source"),(0,r.kt)("p",null,"You should add the following lines to your ",(0,r.kt)("inlineCode",{parentName:"p"},".flowconfig"),", if you run into Flow errors, coming from the styled-components\npackage in your ",(0,r.kt)("inlineCode",{parentName:"p"},"node_modules")," directory."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"[ignore]\n.*/node_modules/styled-components/.*\n")))}ke.isMDXComponent=!0;var fe=["components"],ge={};function we(e){var t=e.components,n=(0,a.Z)(e,fe);return(0,r.kt)("wrapper",(0,o.Z)({},ge,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",null,"TypeScript"),(0,r.kt)("p",null,"styled-components has community-organized ",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@types/styled-components"},"TypeScript definitions")," on ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/DefinitelyTyped/DefinitelyTyped"},"DefinitelyTyped")," which powers the editing experience in IDEs and can provide types for TypeScript projects. To install them, run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"# Web\nnpm install --save @types/styled-components\n\n# React Native\nnpm install --save @types/styled-components @types/styled-components-react-native\n")),(0,r.kt)("p",null,"React Native only: If your ",(0,r.kt)("inlineCode",{parentName:"p"},"tsconfig")," assigns ",(0,r.kt)("inlineCode",{parentName:"p"},"types"),' then you will need to add "styled-components-react-native" there.  For example:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'"types": ["jest", "styled-components-react-native"],\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Now that Babel 7 is out and the ",(0,r.kt)("a",{parentName:"p",href:"https://babeljs.io/docs/en/babel-preset-typescript"},"TypeScript preset")," is available, it's now possible to use the ",(0,r.kt)("a",{parentName:"p",href:"/docs/tooling#babel-plugin"},"styled-components babel plugin")," in conjunction with TypeScript.")),(0,r.kt)("p",null,"Before you can effectively start to use TypeScript you will have to do a little bit of configuration."),(0,r.kt)("h3",null,"Create a declarations file"),(0,r.kt)("p",null,"TypeScript definitions for styled-components can be extended by using ",(0,r.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/declaration-merging.html"},"declaration merging")," since version ",(0,r.kt)("inlineCode",{parentName:"p"},"v4.1.4")," of the definitions."),(0,r.kt)("p",null,"So the first step is creating a declarations file. Let's name it ",(0,r.kt)("inlineCode",{parentName:"p"},"styled.d.ts")," for example."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// import original module declarations\nimport 'styled-components';\n\n// and extend them!\ndeclare module 'styled-components' {\n  export interface DefaultTheme {\n    borderRadius: string;\n\n    colors: {\n      main: string;\n      secondary: string;\n    };\n  }\n}\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"DefaultTheme")," is being used as an interface of ",(0,r.kt)("inlineCode",{parentName:"p"},"props.theme")," out of the box. By default the interface ",(0,r.kt)("inlineCode",{parentName:"p"},"DefaultTheme")," is empty so that's why we need to extend it."),(0,r.kt)("h3",null,"Create a theme"),(0,r.kt)("p",null,"Now we can create a theme just by using the ",(0,r.kt)("inlineCode",{parentName:"p"},"DefaultTheme")," declared at the step above."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// my-theme.ts\nimport { DefaultTheme } from 'styled-components';\n\nconst myTheme: DefaultTheme = {\n  borderRadius: '5px',\n\n  colors: {\n    main: 'cyan',\n    secondary: 'magenta',\n  },\n};\n\nexport { myTheme };\n")),(0,r.kt)("p",null,"React-Native:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'// styled-components.ts\nimport * as styledComponents from "styled-components/native";\n\nimport ThemeInterface from "./theme";\n\nconst {\n  default: styled,\n  css,\n  ThemeProvider\n} = styledComponents as styledComponents.ReactNativeThemedStyledComponentsModule<ThemeInterface>;\n\nexport { css, ThemeProvider };\nexport default styled;\n')),(0,r.kt)("h3",null,"Styling components"),(0,r.kt)("p",null,"That's it! We're able to use styled-components just by using any original import."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import styled, { createGlobalStyle, css } from 'styled-components';\n\n// theme is now fully typed\nexport const MyComponent = styled.div`\n  color: ${props => props.theme.colors.main};\n`;\n\n// theme is also fully typed\nexport MyGlobalStyle = createGlobalStyle`\n  body {\n    background-color: ${props => props.theme.colors.secondary};\n  }\n`;\n\n// and this theme is fully typed as well\nexport cssHelper = css`\n  border: 1px solid ${props => props.theme.borderRadius};\n`;\n")),(0,r.kt)("h3",null,"Using custom props"),(0,r.kt)("p",null,"If you are ",(0,r.kt)("a",{parentName:"p",href:"https://styled-components.com/docs/basics#adapting-based-on-props"},"adapting the styles based on props"),", and those props are not part of the base tag / component props, you can tell TypeScript what those extra custom props are, with type arguments like this (",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Microsoft/TypeScript/wiki/What%27s-new-in-TypeScript#generic-type-arguments-in-generic-tagged-templates"},"TypeScript ",(0,r.kt)("inlineCode",{parentName:"a"},"v2.9+")," is required"),"):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import styled from 'styled-components';\nimport Header from './Header';\n\ninterface TitleProps {\n  readonly isActive: boolean;\n}\n\nconst Title = styled.h1<TitleProps>`\n  color: ${(props) => (props.isActive ? props.theme.colors.main : props.theme.colors.secondary)};\n`;\n")),(0,r.kt)("p",null,"Note: if you style a standard tag (like ",(0,r.kt)("inlineCode",{parentName:"p"},"<h1>")," in above example), styled-components ",(0,r.kt)("a",{parentName:"p",href:"https://styled-components.com/docs/basics#passed-props"},"will not pass the custom props")," (to avoid the ",(0,r.kt)("a",{parentName:"p",href:"https://reactjs.org/warnings/unknown-prop.html"},"Unknown Prop Warning"),")."),(0,r.kt)("p",null,"However, it will pass all of them to a custom React component:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import styled from 'styled-components';\nimport Header from './Header';\n\nconst NewHeader = styled(Header)<{ customColor: string }>`\n  color: ${(props) => props.customColor};\n`;\n// Header will also receive props.customColor\n")),(0,r.kt)("p",null,"If the ",(0,r.kt)("strong",{parentName:"p"},"customColor")," property should not be transferred to the ",(0,r.kt)("strong",{parentName:"p"},"Header")," component, you can leverage ",(0,r.kt)("a",{parentName:"p",href:"https://styled-components.com/docs/api#transient-props"},"transient props"),", by prefixing it with a dollar sign ($):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import styled from 'styled-components';\nimport Header from './Header';\n\nconst NewHeader2 = styled(Header)<{ $customColor: string }>`\n  color: ${(props) => props.$customColor};\n`;\n// Header does NOT receive props.$customColor\n")),(0,r.kt)("p",null,"Depending on your use case, you can achieve a similar result by extracting the custom props yourself:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import styled from 'styled-components';\nimport Header, { Props as HeaderProps } from './Header';\n\nconst NewHeader3 = styled(({ customColor, ...rest }: { customColor: string } & HeaderProps) => <Header {...rest} />)`\n  color: ${(props) => props.customColor};\n`;\n")),(0,r.kt)("p",null,"Or using ",(0,r.kt)("a",{parentName:"p",href:"https://styled-components.com/docs/api#shouldforwardprop"},"shouldForwardProp"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import styled from 'styled-components';\nimport Header from './Header';\n\nconst NewHeader4 = styled(Header).withConfig({\n  shouldForwardProp: (prop, defaultValidatorFn) => !['customColor'].includes(prop),\n})<{ customColor: string }>`\n  color: ${(props) => props.customColor};\n`;\n")),(0,r.kt)("h3",null,"Caveat with ",(0,r.kt)("inlineCode",{parentName:"h3"},"className")),(0,r.kt)("p",null,"When defining a component you will need to mark ",(0,r.kt)("inlineCode",{parentName:"p"},"className")," as optional\nin your Props interface:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"interface LogoProps {\n  /* This prop is optional, since TypeScript won't know that it's passed by the wrapper */\n  className?: string;\n}\n\nclass Logo extends React.Component<LogoProps, {}> {\n  render() {\n    return <div className={this.props.className}>Logo</div>;\n  }\n}\n\nconst LogoStyled = styled(Logo)`\n  font-family: 'Helvetica';\n  font-weight: bold;\n  font-size: 1.8rem;\n`;\n")),(0,r.kt)("h3",null,"Caveat with Function Components"),(0,r.kt)("p",null,"To use function components and have typechecking for the props you'll need to define\nthe component alongside with its type. This is not special to styled-components, this is just\nhow React works:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"interface BoxProps {\n  theme?: ThemeInterface;\n  borders?: boolean;\n  className?: string;\n}\n\nconst Box: React.FunctionComponent<BoxProps> = (props) => <div className={props.className}>{props.children}</div>;\n\nconst StyledBox = styled(Box)`\n  padding: ${(props) => props.theme.lateralPadding};\n`;\n")))}we.isMDXComponent=!0;var Ce=["components"],be={};function xe(e){var t=e.components,n=(0,a.Z)(e,Ce);return(0,r.kt)("wrapper",(0,o.Z)({},be,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h3",null,(0,r.kt)("em",{parentName:"h3"},"[Deprecated]")," ",(0,r.kt)("inlineCode",{parentName:"h3"},".extend")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},".extend")," API was removed in styled-components v4. Use ",(0,r.kt)("inlineCode",{parentName:"p"},"styled(StyledComponent)")," instead. For more information, see: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/styled-components/styled-components/issues/1546"},"https://github.com/styled-components/styled-components/issues/1546"))),(0,r.kt)("p",null,"This is a method that creates a new ",(0,r.kt)("inlineCode",{parentName:"p"},"StyledComponent")," and extends its rules."),(0,r.kt)(w,{head:["Arguments","Description"],mdxType:"Table"},(0,r.kt)(k,{mdxType:"Row"},(0,r.kt)(f,{mdxType:"Column"},"1. ",(0,r.kt)(s.Z,{mdxType:"Code"},"TaggedTemplateLiteral")),(0,r.kt)(f,{mdxType:"Column"},"A tagged template literal with your CSS and interpolations."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import styled from 'styled-components'\n\nconst Component = styled.div`\n  color: red;\n`\n\nconst Component2 = Component.extend`\n  background: white;\n  color: blue;\n`\n")),(0,r.kt)("p",null,"Returns a new ",(0,r.kt)("inlineCode",{parentName:"p"},"StyledComponent")," with the new rules merged into the ones of the component\nthis method was called on."))}xe.isMDXComponent=!0;var Te=["components"],ve={};function Ne(e){var t=e.components,n=(0,a.Z)(e,Te);return(0,r.kt)("wrapper",(0,o.Z)({},ve,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h3",null,(0,r.kt)("em",{parentName:"h3"},"[Deprecated]")," ",(0,r.kt)("inlineCode",{parentName:"h3"},"injectGlobal")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"injectGlobal")," API was removed and replaced by ",(0,r.kt)("inlineCode",{parentName:"p"},"createGlobalStyle")," in styled-components v4.")),(0,r.kt)("p",null,"A helper method to write global CSS. It does not return a component, but adds the styles to\nthe stylesheet directly."),(0,r.kt)(w,{head:["Arguments","Description"],mdxType:"Table"},(0,r.kt)(k,{mdxType:"Row"},(0,r.kt)(f,{mdxType:"Column"},"1. ",(0,r.kt)(s.Z,{mdxType:"Code"},"TaggedTemplateLiteral")),(0,r.kt)(f,{mdxType:"Column"},"A tagged template literal with your global styles inside."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'import { injectGlobal } from \'styled-components\'\n\ninjectGlobal`\n  @font-face {\n    font-family: "Operator Mono";\n    src: url("../fonts/Operator-Mono.ttf");\n  }\n\n  body {\n    margin: 0;\n  }\n`\n')),(0,r.kt)("p",null,"We do not encourage the use of this. Try to use it once per app at most, if you\nmust, contained in a single file. This is an escape hatch. Only use it for the\nrare ",(0,r.kt)("inlineCode",{parentName:"p"},"@font-face")," definition or body styling."))}Ne.isMDXComponent=!0;var Se=["components"],Me={};function Ze(e){var t=e.components,n=(0,a.Z)(e,Se);return(0,r.kt)("wrapper",(0,o.Z)({},Me,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h3",null,(0,r.kt)("em",{parentName:"h3"},"[Deprecated]")," ",(0,r.kt)("inlineCode",{parentName:"h3"},'"innerRef"')," prop"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},'"innerRef"')," prop was removed in styled-components v4 in favor of the ",(0,r.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/forwarding-refs.html"},"React 16 ",(0,r.kt)("inlineCode",{parentName:"a"},"forwardRef")," API"),". Just use the normal ",(0,r.kt)("inlineCode",{parentName:"p"},"ref")," prop instead.")),(0,r.kt)("p",null,"Passing a ",(0,r.kt)("inlineCode",{parentName:"p"},"ref")," prop to a styled component will give you an instance of\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"StyledComponent")," wrapper, but not to the underlying DOM node.\nThis is due to how refs work.\nIt's not possible to call DOM methods, like ",(0,r.kt)("inlineCode",{parentName:"p"},"focus"),", on our wrappers directly."),(0,r.kt)("p",null,"To get a ref to the actual, wrapped DOM node, pass the callback to the ",(0,r.kt)("inlineCode",{parentName:"p"},"innerRef")," prop instead."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"We don't support string refs (i.e. ",(0,r.kt)("inlineCode",{parentName:"p"},'innerRef="node"'),"), since they're already deprecated in React.")),(0,r.kt)("p",null,"This example uses ",(0,r.kt)("inlineCode",{parentName:"p"},"innerRef")," to save a ref to the styled input and focuses it once the user\nhovers over it."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'const Input = styled.input`\n  padding: 0.5em;\n  margin: 0.5em;\n  color: palevioletred;\n  background: papayawhip;\n  border: none;\n  border-radius: 3px;\n`\n\nclass Form extends React.Component {\n  render() {\n    return (\n      <Input\n        placeholder="Hover here..."\n        innerRef={x => {\n          this.input = x\n        }}\n        onMouseEnter={() => this.input.focus()}\n      />\n    )\n  }\n}\n')))}Ze.isMDXComponent=!0;var De=["components"],Pe={};function Re(e){var t=e.components,n=(0,a.Z)(e,De);return(0,r.kt)("wrapper",(0,o.Z)({},Pe,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",null,"Previous APIs"),(0,r.kt)(xe,{mdxType:"Extend"}),(0,r.kt)(Ne,{mdxType:"InjectGlobal"}),(0,r.kt)(Ze,{mdxType:"InnerRef"}))}Re.isMDXComponent=!0;var je=["components"],Ae={};function Ie(e){var t=e.components,n=(0,a.Z)(e,je);return(0,r.kt)("wrapper",(0,o.Z)({},Ae,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h3",null,(0,r.kt)("inlineCode",{parentName:"h3"},"find")," | v3"),(0,r.kt)("p",null,"A convenience method to find a single instance of a styled component's rendered DOM node within a given DOM root."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import styled from 'styled-components'\nimport { find } from 'styled-components/test-utils'\n\nconst Foo = styled.div`\n  color: red;\n`\n\n/**\n * Somewhere in your app:\n *\n * ReactDOM.render(\n *   <main>\n *     <Foo />\n *   </main>, document.body\n * );\n */\n\n// retrieves the first instance of \"Foo\" in the body (querySelector under the hood)\nfind(document.body, Foo) // HTMLDivElement | null\n")))}Ie.isMDXComponent=!0;var Fe=["components"],Le={};function Xe(e){var t=e.components,n=(0,a.Z)(e,Fe);return(0,r.kt)("wrapper",(0,o.Z)({},Le,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h3",null,(0,r.kt)("inlineCode",{parentName:"h3"},"findAll")," | v3"),(0,r.kt)("p",null,"A convenience method to find all instances of a styled component's rendered DOM node within a given DOM root."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import styled from \'styled-components\'\nimport { findAll } from \'styled-components/test-utils\'\n\nconst Foo = styled.div`\n  color: ${props => props.color};\n`\n\n/**\n * Somewhere in your app:\n *\n * ReactDOM.render(\n *   <main>\n *     <Foo color="red" />\n *     <Foo color="green" />\n *   </main>, document.body\n * );\n */\n\n// retrieves a NodeList of instances of "Foo" in the body (querySelectorAll under the hood)\nfindAll(document.body, Foo) // NodeList<HTMLDivElement> | null\n')))}Xe.isMDXComponent=!0;var He=["components"],Be={};function $e(e){var t=e.components,n=(0,a.Z)(e,He);return(0,r.kt)("wrapper",(0,o.Z)({},Be,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h3",null,(0,r.kt)("inlineCode",{parentName:"h3"},"enzymeFind")," | v4"),(0,r.kt)("p",null,"A convenience method for finding instances of a particular styled component within an enzyme wrapper."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { mount } from 'enzyme'\nimport styled from 'styled-components'\nimport { enzymeFind } from 'styled-components/test-utils'\n\nconst Foo = styled.div`\n  color: red;\n`\n\nconst wrapper = mount(\n  <div>\n    <Foo>bar</Foo>\n  </div>\n)\n\nenzymeFind(wrapper, Foo)\n")))}$e.isMDXComponent=!0;var qe=["components"],_e={};function Ee(e){var t=e.components,n=(0,a.Z)(e,qe);return(0,r.kt)("wrapper",(0,o.Z)({},_e,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",null,"Test Utilities"),(0,r.kt)(Ie,{mdxType:"Find"}),(0,r.kt)(Xe,{mdxType:"FindAll"}),(0,r.kt)($e,{mdxType:"EnzymeFind"}))}Ee.isMDXComponent=!0;var ze=["components"],Oe={},Ve=function(e){var t=e.children;return(0,r.kt)(l.Z,{title:"API Reference",description:"API Reference of styled-components"},t)};function Ge(e){var t=e.components,n=(0,a.Z)(e,ze);return(0,r.kt)(Ve,(0,o.Z)({},Oe,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(X,{mdxType:"Primary"}),(0,r.kt)(de,{mdxType:"Helpers"}),(0,r.kt)(Ee,{mdxType:"TestUtilities"}),(0,r.kt)(ue,{mdxType:"SupportedCSS"}),(0,r.kt)(ke,{mdxType:"Flow"}),(0,r.kt)(we,{mdxType:"TypeScript"}),(0,r.kt)(Re,{mdxType:"OldAPIs"}),(0,r.kt)(p.Z,{href:"/docs/tooling",title:"Tooling",mdxType:"NextPage"}))}Ge.isMDXComponent=!0},2426:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/api",function(){return n(2341)}])},1163:function(e,t,n){e.exports=n(9898)},6864:function(e,t,n){"use strict";function o(){return o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},o.apply(this,arguments)}n.d(t,{Z:function(){return o}})}},function(e){e.O(0,[791,774,888,179],(function(){return t=2426,e(e.s=t);var t}));var t=e.O();_N_E=t}]);
//# sourceMappingURL=api-88b9a434e4c41061.js.map